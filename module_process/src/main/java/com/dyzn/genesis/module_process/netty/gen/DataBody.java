package com.dyzn.genesis.module_process.netty.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-08-27")
public class DataBody extends org.apache.thrift.TUnion<DataBody, DataBody._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DataBody");
  private static final org.apache.thrift.protocol.TField BIND_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("bindMsg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CHOOSE_MODEL_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("chooseModelMsg", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CLAMP_OR_RELEASE_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("clampOrReleaseMsg", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField OPEN_OR_CLOSE_CAM_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("openOrCloseCamMsg", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField RUN_OR_STOP_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("runOrStopMsg", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField SET_SYS_PARAM_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("setSysParamMsg", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField PROGRESS_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("progressMsg", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField MAIN_AXIS_TEMP_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("mainAxisTempMsg", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField HULL_TEMP_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("hullTempMsg", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField ESTOP_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("estopMsg", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField HARD_LIMIT_STATUS_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("hardLimitStatusMsg", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField HULL_ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("hullErrorMsg", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField KNIFE_ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("knifeErrorMsg", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField ERROR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errorMsg", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField MPG_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("mpgMsg", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField LOGIN_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("loginMsg", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField ONLINE_STATUS_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineStatusMsg", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField QUERY_STATUS_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("queryStatusMsg", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField SET_ACTUAL_COORD_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("setActualCoordMsg", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField SET_FEED_RATE_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("setFeedRateMsg", org.apache.thrift.protocol.TType.STRUCT, (short)20);
  private static final org.apache.thrift.protocol.TField QUERY_TIME_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("queryTimeMsg", org.apache.thrift.protocol.TType.STRUCT, (short)21);
  private static final org.apache.thrift.protocol.TField CAM_PIC_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("camPicMsg", org.apache.thrift.protocol.TType.STRUCT, (short)22);
  private static final org.apache.thrift.protocol.TField AUTO_RUN_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("autoRunMsg", org.apache.thrift.protocol.TType.STRUCT, (short)23);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BIND_MSG((short)1, "bindMsg"),
    CHOOSE_MODEL_MSG((short)2, "chooseModelMsg"),
    CLAMP_OR_RELEASE_MSG((short)3, "clampOrReleaseMsg"),
    OPEN_OR_CLOSE_CAM_MSG((short)4, "openOrCloseCamMsg"),
    RUN_OR_STOP_MSG((short)5, "runOrStopMsg"),
    SET_SYS_PARAM_MSG((short)6, "setSysParamMsg"),
    PROGRESS_MSG((short)7, "progressMsg"),
    MAIN_AXIS_TEMP_MSG((short)8, "mainAxisTempMsg"),
    HULL_TEMP_MSG((short)9, "hullTempMsg"),
    ESTOP_MSG((short)10, "estopMsg"),
    HARD_LIMIT_STATUS_MSG((short)11, "hardLimitStatusMsg"),
    HULL_ERROR_MSG((short)12, "hullErrorMsg"),
    KNIFE_ERROR_MSG((short)13, "knifeErrorMsg"),
    ERROR_MSG((short)14, "errorMsg"),
    MPG_MSG((short)15, "mpgMsg"),
    LOGIN_MSG((short)16, "loginMsg"),
    ONLINE_STATUS_MSG((short)17, "onlineStatusMsg"),
    QUERY_STATUS_MSG((short)18, "queryStatusMsg"),
    SET_ACTUAL_COORD_MSG((short)19, "setActualCoordMsg"),
    SET_FEED_RATE_MSG((short)20, "setFeedRateMsg"),
    QUERY_TIME_MSG((short)21, "queryTimeMsg"),
    CAM_PIC_MSG((short)22, "camPicMsg"),
    AUTO_RUN_MSG((short)23, "autoRunMsg");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BIND_MSG
          return BIND_MSG;
        case 2: // CHOOSE_MODEL_MSG
          return CHOOSE_MODEL_MSG;
        case 3: // CLAMP_OR_RELEASE_MSG
          return CLAMP_OR_RELEASE_MSG;
        case 4: // OPEN_OR_CLOSE_CAM_MSG
          return OPEN_OR_CLOSE_CAM_MSG;
        case 5: // RUN_OR_STOP_MSG
          return RUN_OR_STOP_MSG;
        case 6: // SET_SYS_PARAM_MSG
          return SET_SYS_PARAM_MSG;
        case 7: // PROGRESS_MSG
          return PROGRESS_MSG;
        case 8: // MAIN_AXIS_TEMP_MSG
          return MAIN_AXIS_TEMP_MSG;
        case 9: // HULL_TEMP_MSG
          return HULL_TEMP_MSG;
        case 10: // ESTOP_MSG
          return ESTOP_MSG;
        case 11: // HARD_LIMIT_STATUS_MSG
          return HARD_LIMIT_STATUS_MSG;
        case 12: // HULL_ERROR_MSG
          return HULL_ERROR_MSG;
        case 13: // KNIFE_ERROR_MSG
          return KNIFE_ERROR_MSG;
        case 14: // ERROR_MSG
          return ERROR_MSG;
        case 15: // MPG_MSG
          return MPG_MSG;
        case 16: // LOGIN_MSG
          return LOGIN_MSG;
        case 17: // ONLINE_STATUS_MSG
          return ONLINE_STATUS_MSG;
        case 18: // QUERY_STATUS_MSG
          return QUERY_STATUS_MSG;
        case 19: // SET_ACTUAL_COORD_MSG
          return SET_ACTUAL_COORD_MSG;
        case 20: // SET_FEED_RATE_MSG
          return SET_FEED_RATE_MSG;
        case 21: // QUERY_TIME_MSG
          return QUERY_TIME_MSG;
        case 22: // CAM_PIC_MSG
          return CAM_PIC_MSG;
        case 23: // AUTO_RUN_MSG
          return AUTO_RUN_MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BIND_MSG, new org.apache.thrift.meta_data.FieldMetaData("bindMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BindMsg.class)));
    tmpMap.put(_Fields.CHOOSE_MODEL_MSG, new org.apache.thrift.meta_data.FieldMetaData("chooseModelMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChooseModelMsg.class)));
    tmpMap.put(_Fields.CLAMP_OR_RELEASE_MSG, new org.apache.thrift.meta_data.FieldMetaData("clampOrReleaseMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClampOrReleaseMsg.class)));
    tmpMap.put(_Fields.OPEN_OR_CLOSE_CAM_MSG, new org.apache.thrift.meta_data.FieldMetaData("openOrCloseCamMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OpenOrCloseCamMsg.class)));
    tmpMap.put(_Fields.RUN_OR_STOP_MSG, new org.apache.thrift.meta_data.FieldMetaData("runOrStopMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RunOrStopMsg.class)));
    tmpMap.put(_Fields.SET_SYS_PARAM_MSG, new org.apache.thrift.meta_data.FieldMetaData("setSysParamMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SetSysParamMsg.class)));
    tmpMap.put(_Fields.PROGRESS_MSG, new org.apache.thrift.meta_data.FieldMetaData("progressMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProgressMsg.class)));
    tmpMap.put(_Fields.MAIN_AXIS_TEMP_MSG, new org.apache.thrift.meta_data.FieldMetaData("mainAxisTempMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MainAxisTempMsg.class)));
    tmpMap.put(_Fields.HULL_TEMP_MSG, new org.apache.thrift.meta_data.FieldMetaData("hullTempMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HullTempMsg.class)));
    tmpMap.put(_Fields.ESTOP_MSG, new org.apache.thrift.meta_data.FieldMetaData("estopMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EstopMsg.class)));
    tmpMap.put(_Fields.HARD_LIMIT_STATUS_MSG, new org.apache.thrift.meta_data.FieldMetaData("hardLimitStatusMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HardLimitStatusMsg.class)));
    tmpMap.put(_Fields.HULL_ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("hullErrorMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HullErrorMsg.class)));
    tmpMap.put(_Fields.KNIFE_ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("knifeErrorMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KnifeErrorMsg.class)));
    tmpMap.put(_Fields.ERROR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errorMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ErrorMsg.class)));
    tmpMap.put(_Fields.MPG_MSG, new org.apache.thrift.meta_data.FieldMetaData("mpgMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MPGMsg.class)));
    tmpMap.put(_Fields.LOGIN_MSG, new org.apache.thrift.meta_data.FieldMetaData("loginMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoginMsg.class)));
    tmpMap.put(_Fields.ONLINE_STATUS_MSG, new org.apache.thrift.meta_data.FieldMetaData("onlineStatusMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OnlineStatusMsg.class)));
    tmpMap.put(_Fields.QUERY_STATUS_MSG, new org.apache.thrift.meta_data.FieldMetaData("queryStatusMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryStatusMsg.class)));
    tmpMap.put(_Fields.SET_ACTUAL_COORD_MSG, new org.apache.thrift.meta_data.FieldMetaData("setActualCoordMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SetActualCoordMsg.class)));
    tmpMap.put(_Fields.SET_FEED_RATE_MSG, new org.apache.thrift.meta_data.FieldMetaData("setFeedRateMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SetFeedRateMsg.class)));
    tmpMap.put(_Fields.QUERY_TIME_MSG, new org.apache.thrift.meta_data.FieldMetaData("queryTimeMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QueryTimeMsg.class)));
    tmpMap.put(_Fields.CAM_PIC_MSG, new org.apache.thrift.meta_data.FieldMetaData("camPicMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CamPicMsg.class)));
    tmpMap.put(_Fields.AUTO_RUN_MSG, new org.apache.thrift.meta_data.FieldMetaData("autoRunMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AutoRunNextStepMsg.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataBody.class, metaDataMap);
  }

  public DataBody() {
    super();
  }

  public DataBody(_Fields setField, Object value) {
    super(setField, value);
  }

  public DataBody(DataBody other) {
    super(other);
  }
  public DataBody deepCopy() {
    return new DataBody(this);
  }

  public static DataBody bindMsg(BindMsg value) {
    DataBody x = new DataBody();
    x.setBindMsg(value);
    return x;
  }

  public static DataBody chooseModelMsg(ChooseModelMsg value) {
    DataBody x = new DataBody();
    x.setChooseModelMsg(value);
    return x;
  }

  public static DataBody clampOrReleaseMsg(ClampOrReleaseMsg value) {
    DataBody x = new DataBody();
    x.setClampOrReleaseMsg(value);
    return x;
  }

  public static DataBody openOrCloseCamMsg(OpenOrCloseCamMsg value) {
    DataBody x = new DataBody();
    x.setOpenOrCloseCamMsg(value);
    return x;
  }

  public static DataBody runOrStopMsg(RunOrStopMsg value) {
    DataBody x = new DataBody();
    x.setRunOrStopMsg(value);
    return x;
  }

  public static DataBody setSysParamMsg(SetSysParamMsg value) {
    DataBody x = new DataBody();
    x.setSetSysParamMsg(value);
    return x;
  }

  public static DataBody progressMsg(ProgressMsg value) {
    DataBody x = new DataBody();
    x.setProgressMsg(value);
    return x;
  }

  public static DataBody mainAxisTempMsg(MainAxisTempMsg value) {
    DataBody x = new DataBody();
    x.setMainAxisTempMsg(value);
    return x;
  }

  public static DataBody hullTempMsg(HullTempMsg value) {
    DataBody x = new DataBody();
    x.setHullTempMsg(value);
    return x;
  }

  public static DataBody estopMsg(EstopMsg value) {
    DataBody x = new DataBody();
    x.setEstopMsg(value);
    return x;
  }

  public static DataBody hardLimitStatusMsg(HardLimitStatusMsg value) {
    DataBody x = new DataBody();
    x.setHardLimitStatusMsg(value);
    return x;
  }

  public static DataBody hullErrorMsg(HullErrorMsg value) {
    DataBody x = new DataBody();
    x.setHullErrorMsg(value);
    return x;
  }

  public static DataBody knifeErrorMsg(KnifeErrorMsg value) {
    DataBody x = new DataBody();
    x.setKnifeErrorMsg(value);
    return x;
  }

  public static DataBody errorMsg(ErrorMsg value) {
    DataBody x = new DataBody();
    x.setErrorMsg(value);
    return x;
  }

  public static DataBody mpgMsg(MPGMsg value) {
    DataBody x = new DataBody();
    x.setMpgMsg(value);
    return x;
  }

  public static DataBody loginMsg(LoginMsg value) {
    DataBody x = new DataBody();
    x.setLoginMsg(value);
    return x;
  }

  public static DataBody onlineStatusMsg(OnlineStatusMsg value) {
    DataBody x = new DataBody();
    x.setOnlineStatusMsg(value);
    return x;
  }

  public static DataBody queryStatusMsg(QueryStatusMsg value) {
    DataBody x = new DataBody();
    x.setQueryStatusMsg(value);
    return x;
  }

  public static DataBody setActualCoordMsg(SetActualCoordMsg value) {
    DataBody x = new DataBody();
    x.setSetActualCoordMsg(value);
    return x;
  }

  public static DataBody setFeedRateMsg(SetFeedRateMsg value) {
    DataBody x = new DataBody();
    x.setSetFeedRateMsg(value);
    return x;
  }

  public static DataBody queryTimeMsg(QueryTimeMsg value) {
    DataBody x = new DataBody();
    x.setQueryTimeMsg(value);
    return x;
  }

  public static DataBody camPicMsg(CamPicMsg value) {
    DataBody x = new DataBody();
    x.setCamPicMsg(value);
    return x;
  }

  public static DataBody autoRunMsg(AutoRunNextStepMsg value) {
    DataBody x = new DataBody();
    x.setAutoRunMsg(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case BIND_MSG:
        if (value instanceof BindMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type BindMsg for field 'bindMsg', but got " + value.getClass().getSimpleName());
      case CHOOSE_MODEL_MSG:
        if (value instanceof ChooseModelMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ChooseModelMsg for field 'chooseModelMsg', but got " + value.getClass().getSimpleName());
      case CLAMP_OR_RELEASE_MSG:
        if (value instanceof ClampOrReleaseMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ClampOrReleaseMsg for field 'clampOrReleaseMsg', but got " + value.getClass().getSimpleName());
      case OPEN_OR_CLOSE_CAM_MSG:
        if (value instanceof OpenOrCloseCamMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type OpenOrCloseCamMsg for field 'openOrCloseCamMsg', but got " + value.getClass().getSimpleName());
      case RUN_OR_STOP_MSG:
        if (value instanceof RunOrStopMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type RunOrStopMsg for field 'runOrStopMsg', but got " + value.getClass().getSimpleName());
      case SET_SYS_PARAM_MSG:
        if (value instanceof SetSysParamMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SetSysParamMsg for field 'setSysParamMsg', but got " + value.getClass().getSimpleName());
      case PROGRESS_MSG:
        if (value instanceof ProgressMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ProgressMsg for field 'progressMsg', but got " + value.getClass().getSimpleName());
      case MAIN_AXIS_TEMP_MSG:
        if (value instanceof MainAxisTempMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type MainAxisTempMsg for field 'mainAxisTempMsg', but got " + value.getClass().getSimpleName());
      case HULL_TEMP_MSG:
        if (value instanceof HullTempMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type HullTempMsg for field 'hullTempMsg', but got " + value.getClass().getSimpleName());
      case ESTOP_MSG:
        if (value instanceof EstopMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type EstopMsg for field 'estopMsg', but got " + value.getClass().getSimpleName());
      case HARD_LIMIT_STATUS_MSG:
        if (value instanceof HardLimitStatusMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type HardLimitStatusMsg for field 'hardLimitStatusMsg', but got " + value.getClass().getSimpleName());
      case HULL_ERROR_MSG:
        if (value instanceof HullErrorMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type HullErrorMsg for field 'hullErrorMsg', but got " + value.getClass().getSimpleName());
      case KNIFE_ERROR_MSG:
        if (value instanceof KnifeErrorMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type KnifeErrorMsg for field 'knifeErrorMsg', but got " + value.getClass().getSimpleName());
      case ERROR_MSG:
        if (value instanceof ErrorMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ErrorMsg for field 'errorMsg', but got " + value.getClass().getSimpleName());
      case MPG_MSG:
        if (value instanceof MPGMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type MPGMsg for field 'mpgMsg', but got " + value.getClass().getSimpleName());
      case LOGIN_MSG:
        if (value instanceof LoginMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type LoginMsg for field 'loginMsg', but got " + value.getClass().getSimpleName());
      case ONLINE_STATUS_MSG:
        if (value instanceof OnlineStatusMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type OnlineStatusMsg for field 'onlineStatusMsg', but got " + value.getClass().getSimpleName());
      case QUERY_STATUS_MSG:
        if (value instanceof QueryStatusMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type QueryStatusMsg for field 'queryStatusMsg', but got " + value.getClass().getSimpleName());
      case SET_ACTUAL_COORD_MSG:
        if (value instanceof SetActualCoordMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SetActualCoordMsg for field 'setActualCoordMsg', but got " + value.getClass().getSimpleName());
      case SET_FEED_RATE_MSG:
        if (value instanceof SetFeedRateMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SetFeedRateMsg for field 'setFeedRateMsg', but got " + value.getClass().getSimpleName());
      case QUERY_TIME_MSG:
        if (value instanceof QueryTimeMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type QueryTimeMsg for field 'queryTimeMsg', but got " + value.getClass().getSimpleName());
      case CAM_PIC_MSG:
        if (value instanceof CamPicMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type CamPicMsg for field 'camPicMsg', but got " + value.getClass().getSimpleName());
      case AUTO_RUN_MSG:
        if (value instanceof AutoRunNextStepMsg) {
          break;
        }
        throw new ClassCastException("Was expecting value of type AutoRunNextStepMsg for field 'autoRunMsg', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case BIND_MSG:
          if (field.type == BIND_MSG_FIELD_DESC.type) {
            BindMsg bindMsg;
            bindMsg = new BindMsg();
            bindMsg.read(iprot);
            return bindMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CHOOSE_MODEL_MSG:
          if (field.type == CHOOSE_MODEL_MSG_FIELD_DESC.type) {
            ChooseModelMsg chooseModelMsg;
            chooseModelMsg = new ChooseModelMsg();
            chooseModelMsg.read(iprot);
            return chooseModelMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CLAMP_OR_RELEASE_MSG:
          if (field.type == CLAMP_OR_RELEASE_MSG_FIELD_DESC.type) {
            ClampOrReleaseMsg clampOrReleaseMsg;
            clampOrReleaseMsg = new ClampOrReleaseMsg();
            clampOrReleaseMsg.read(iprot);
            return clampOrReleaseMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case OPEN_OR_CLOSE_CAM_MSG:
          if (field.type == OPEN_OR_CLOSE_CAM_MSG_FIELD_DESC.type) {
            OpenOrCloseCamMsg openOrCloseCamMsg;
            openOrCloseCamMsg = new OpenOrCloseCamMsg();
            openOrCloseCamMsg.read(iprot);
            return openOrCloseCamMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case RUN_OR_STOP_MSG:
          if (field.type == RUN_OR_STOP_MSG_FIELD_DESC.type) {
            RunOrStopMsg runOrStopMsg;
            runOrStopMsg = new RunOrStopMsg();
            runOrStopMsg.read(iprot);
            return runOrStopMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SET_SYS_PARAM_MSG:
          if (field.type == SET_SYS_PARAM_MSG_FIELD_DESC.type) {
            SetSysParamMsg setSysParamMsg;
            setSysParamMsg = new SetSysParamMsg();
            setSysParamMsg.read(iprot);
            return setSysParamMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PROGRESS_MSG:
          if (field.type == PROGRESS_MSG_FIELD_DESC.type) {
            ProgressMsg progressMsg;
            progressMsg = new ProgressMsg();
            progressMsg.read(iprot);
            return progressMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MAIN_AXIS_TEMP_MSG:
          if (field.type == MAIN_AXIS_TEMP_MSG_FIELD_DESC.type) {
            MainAxisTempMsg mainAxisTempMsg;
            mainAxisTempMsg = new MainAxisTempMsg();
            mainAxisTempMsg.read(iprot);
            return mainAxisTempMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HULL_TEMP_MSG:
          if (field.type == HULL_TEMP_MSG_FIELD_DESC.type) {
            HullTempMsg hullTempMsg;
            hullTempMsg = new HullTempMsg();
            hullTempMsg.read(iprot);
            return hullTempMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ESTOP_MSG:
          if (field.type == ESTOP_MSG_FIELD_DESC.type) {
            EstopMsg estopMsg;
            estopMsg = new EstopMsg();
            estopMsg.read(iprot);
            return estopMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HARD_LIMIT_STATUS_MSG:
          if (field.type == HARD_LIMIT_STATUS_MSG_FIELD_DESC.type) {
            HardLimitStatusMsg hardLimitStatusMsg;
            hardLimitStatusMsg = new HardLimitStatusMsg();
            hardLimitStatusMsg.read(iprot);
            return hardLimitStatusMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case HULL_ERROR_MSG:
          if (field.type == HULL_ERROR_MSG_FIELD_DESC.type) {
            HullErrorMsg hullErrorMsg;
            hullErrorMsg = new HullErrorMsg();
            hullErrorMsg.read(iprot);
            return hullErrorMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case KNIFE_ERROR_MSG:
          if (field.type == KNIFE_ERROR_MSG_FIELD_DESC.type) {
            KnifeErrorMsg knifeErrorMsg;
            knifeErrorMsg = new KnifeErrorMsg();
            knifeErrorMsg.read(iprot);
            return knifeErrorMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ERROR_MSG:
          if (field.type == ERROR_MSG_FIELD_DESC.type) {
            ErrorMsg errorMsg;
            errorMsg = new ErrorMsg();
            errorMsg.read(iprot);
            return errorMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case MPG_MSG:
          if (field.type == MPG_MSG_FIELD_DESC.type) {
            MPGMsg mpgMsg;
            mpgMsg = new MPGMsg();
            mpgMsg.read(iprot);
            return mpgMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LOGIN_MSG:
          if (field.type == LOGIN_MSG_FIELD_DESC.type) {
            LoginMsg loginMsg;
            loginMsg = new LoginMsg();
            loginMsg.read(iprot);
            return loginMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ONLINE_STATUS_MSG:
          if (field.type == ONLINE_STATUS_MSG_FIELD_DESC.type) {
            OnlineStatusMsg onlineStatusMsg;
            onlineStatusMsg = new OnlineStatusMsg();
            onlineStatusMsg.read(iprot);
            return onlineStatusMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case QUERY_STATUS_MSG:
          if (field.type == QUERY_STATUS_MSG_FIELD_DESC.type) {
            QueryStatusMsg queryStatusMsg;
            queryStatusMsg = new QueryStatusMsg();
            queryStatusMsg.read(iprot);
            return queryStatusMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SET_ACTUAL_COORD_MSG:
          if (field.type == SET_ACTUAL_COORD_MSG_FIELD_DESC.type) {
            SetActualCoordMsg setActualCoordMsg;
            setActualCoordMsg = new SetActualCoordMsg();
            setActualCoordMsg.read(iprot);
            return setActualCoordMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SET_FEED_RATE_MSG:
          if (field.type == SET_FEED_RATE_MSG_FIELD_DESC.type) {
            SetFeedRateMsg setFeedRateMsg;
            setFeedRateMsg = new SetFeedRateMsg();
            setFeedRateMsg.read(iprot);
            return setFeedRateMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case QUERY_TIME_MSG:
          if (field.type == QUERY_TIME_MSG_FIELD_DESC.type) {
            QueryTimeMsg queryTimeMsg;
            queryTimeMsg = new QueryTimeMsg();
            queryTimeMsg.read(iprot);
            return queryTimeMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CAM_PIC_MSG:
          if (field.type == CAM_PIC_MSG_FIELD_DESC.type) {
            CamPicMsg camPicMsg;
            camPicMsg = new CamPicMsg();
            camPicMsg.read(iprot);
            return camPicMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case AUTO_RUN_MSG:
          if (field.type == AUTO_RUN_MSG_FIELD_DESC.type) {
            AutoRunNextStepMsg autoRunMsg;
            autoRunMsg = new AutoRunNextStepMsg();
            autoRunMsg.read(iprot);
            return autoRunMsg;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case BIND_MSG:
        BindMsg bindMsg = (BindMsg)value_;
        bindMsg.write(oprot);
        return;
      case CHOOSE_MODEL_MSG:
        ChooseModelMsg chooseModelMsg = (ChooseModelMsg)value_;
        chooseModelMsg.write(oprot);
        return;
      case CLAMP_OR_RELEASE_MSG:
        ClampOrReleaseMsg clampOrReleaseMsg = (ClampOrReleaseMsg)value_;
        clampOrReleaseMsg.write(oprot);
        return;
      case OPEN_OR_CLOSE_CAM_MSG:
        OpenOrCloseCamMsg openOrCloseCamMsg = (OpenOrCloseCamMsg)value_;
        openOrCloseCamMsg.write(oprot);
        return;
      case RUN_OR_STOP_MSG:
        RunOrStopMsg runOrStopMsg = (RunOrStopMsg)value_;
        runOrStopMsg.write(oprot);
        return;
      case SET_SYS_PARAM_MSG:
        SetSysParamMsg setSysParamMsg = (SetSysParamMsg)value_;
        setSysParamMsg.write(oprot);
        return;
      case PROGRESS_MSG:
        ProgressMsg progressMsg = (ProgressMsg)value_;
        progressMsg.write(oprot);
        return;
      case MAIN_AXIS_TEMP_MSG:
        MainAxisTempMsg mainAxisTempMsg = (MainAxisTempMsg)value_;
        mainAxisTempMsg.write(oprot);
        return;
      case HULL_TEMP_MSG:
        HullTempMsg hullTempMsg = (HullTempMsg)value_;
        hullTempMsg.write(oprot);
        return;
      case ESTOP_MSG:
        EstopMsg estopMsg = (EstopMsg)value_;
        estopMsg.write(oprot);
        return;
      case HARD_LIMIT_STATUS_MSG:
        HardLimitStatusMsg hardLimitStatusMsg = (HardLimitStatusMsg)value_;
        hardLimitStatusMsg.write(oprot);
        return;
      case HULL_ERROR_MSG:
        HullErrorMsg hullErrorMsg = (HullErrorMsg)value_;
        hullErrorMsg.write(oprot);
        return;
      case KNIFE_ERROR_MSG:
        KnifeErrorMsg knifeErrorMsg = (KnifeErrorMsg)value_;
        knifeErrorMsg.write(oprot);
        return;
      case ERROR_MSG:
        ErrorMsg errorMsg = (ErrorMsg)value_;
        errorMsg.write(oprot);
        return;
      case MPG_MSG:
        MPGMsg mpgMsg = (MPGMsg)value_;
        mpgMsg.write(oprot);
        return;
      case LOGIN_MSG:
        LoginMsg loginMsg = (LoginMsg)value_;
        loginMsg.write(oprot);
        return;
      case ONLINE_STATUS_MSG:
        OnlineStatusMsg onlineStatusMsg = (OnlineStatusMsg)value_;
        onlineStatusMsg.write(oprot);
        return;
      case QUERY_STATUS_MSG:
        QueryStatusMsg queryStatusMsg = (QueryStatusMsg)value_;
        queryStatusMsg.write(oprot);
        return;
      case SET_ACTUAL_COORD_MSG:
        SetActualCoordMsg setActualCoordMsg = (SetActualCoordMsg)value_;
        setActualCoordMsg.write(oprot);
        return;
      case SET_FEED_RATE_MSG:
        SetFeedRateMsg setFeedRateMsg = (SetFeedRateMsg)value_;
        setFeedRateMsg.write(oprot);
        return;
      case QUERY_TIME_MSG:
        QueryTimeMsg queryTimeMsg = (QueryTimeMsg)value_;
        queryTimeMsg.write(oprot);
        return;
      case CAM_PIC_MSG:
        CamPicMsg camPicMsg = (CamPicMsg)value_;
        camPicMsg.write(oprot);
        return;
      case AUTO_RUN_MSG:
        AutoRunNextStepMsg autoRunMsg = (AutoRunNextStepMsg)value_;
        autoRunMsg.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case BIND_MSG:
          BindMsg bindMsg;
          bindMsg = new BindMsg();
          bindMsg.read(iprot);
          return bindMsg;
        case CHOOSE_MODEL_MSG:
          ChooseModelMsg chooseModelMsg;
          chooseModelMsg = new ChooseModelMsg();
          chooseModelMsg.read(iprot);
          return chooseModelMsg;
        case CLAMP_OR_RELEASE_MSG:
          ClampOrReleaseMsg clampOrReleaseMsg;
          clampOrReleaseMsg = new ClampOrReleaseMsg();
          clampOrReleaseMsg.read(iprot);
          return clampOrReleaseMsg;
        case OPEN_OR_CLOSE_CAM_MSG:
          OpenOrCloseCamMsg openOrCloseCamMsg;
          openOrCloseCamMsg = new OpenOrCloseCamMsg();
          openOrCloseCamMsg.read(iprot);
          return openOrCloseCamMsg;
        case RUN_OR_STOP_MSG:
          RunOrStopMsg runOrStopMsg;
          runOrStopMsg = new RunOrStopMsg();
          runOrStopMsg.read(iprot);
          return runOrStopMsg;
        case SET_SYS_PARAM_MSG:
          SetSysParamMsg setSysParamMsg;
          setSysParamMsg = new SetSysParamMsg();
          setSysParamMsg.read(iprot);
          return setSysParamMsg;
        case PROGRESS_MSG:
          ProgressMsg progressMsg;
          progressMsg = new ProgressMsg();
          progressMsg.read(iprot);
          return progressMsg;
        case MAIN_AXIS_TEMP_MSG:
          MainAxisTempMsg mainAxisTempMsg;
          mainAxisTempMsg = new MainAxisTempMsg();
          mainAxisTempMsg.read(iprot);
          return mainAxisTempMsg;
        case HULL_TEMP_MSG:
          HullTempMsg hullTempMsg;
          hullTempMsg = new HullTempMsg();
          hullTempMsg.read(iprot);
          return hullTempMsg;
        case ESTOP_MSG:
          EstopMsg estopMsg;
          estopMsg = new EstopMsg();
          estopMsg.read(iprot);
          return estopMsg;
        case HARD_LIMIT_STATUS_MSG:
          HardLimitStatusMsg hardLimitStatusMsg;
          hardLimitStatusMsg = new HardLimitStatusMsg();
          hardLimitStatusMsg.read(iprot);
          return hardLimitStatusMsg;
        case HULL_ERROR_MSG:
          HullErrorMsg hullErrorMsg;
          hullErrorMsg = new HullErrorMsg();
          hullErrorMsg.read(iprot);
          return hullErrorMsg;
        case KNIFE_ERROR_MSG:
          KnifeErrorMsg knifeErrorMsg;
          knifeErrorMsg = new KnifeErrorMsg();
          knifeErrorMsg.read(iprot);
          return knifeErrorMsg;
        case ERROR_MSG:
          ErrorMsg errorMsg;
          errorMsg = new ErrorMsg();
          errorMsg.read(iprot);
          return errorMsg;
        case MPG_MSG:
          MPGMsg mpgMsg;
          mpgMsg = new MPGMsg();
          mpgMsg.read(iprot);
          return mpgMsg;
        case LOGIN_MSG:
          LoginMsg loginMsg;
          loginMsg = new LoginMsg();
          loginMsg.read(iprot);
          return loginMsg;
        case ONLINE_STATUS_MSG:
          OnlineStatusMsg onlineStatusMsg;
          onlineStatusMsg = new OnlineStatusMsg();
          onlineStatusMsg.read(iprot);
          return onlineStatusMsg;
        case QUERY_STATUS_MSG:
          QueryStatusMsg queryStatusMsg;
          queryStatusMsg = new QueryStatusMsg();
          queryStatusMsg.read(iprot);
          return queryStatusMsg;
        case SET_ACTUAL_COORD_MSG:
          SetActualCoordMsg setActualCoordMsg;
          setActualCoordMsg = new SetActualCoordMsg();
          setActualCoordMsg.read(iprot);
          return setActualCoordMsg;
        case SET_FEED_RATE_MSG:
          SetFeedRateMsg setFeedRateMsg;
          setFeedRateMsg = new SetFeedRateMsg();
          setFeedRateMsg.read(iprot);
          return setFeedRateMsg;
        case QUERY_TIME_MSG:
          QueryTimeMsg queryTimeMsg;
          queryTimeMsg = new QueryTimeMsg();
          queryTimeMsg.read(iprot);
          return queryTimeMsg;
        case CAM_PIC_MSG:
          CamPicMsg camPicMsg;
          camPicMsg = new CamPicMsg();
          camPicMsg.read(iprot);
          return camPicMsg;
        case AUTO_RUN_MSG:
          AutoRunNextStepMsg autoRunMsg;
          autoRunMsg = new AutoRunNextStepMsg();
          autoRunMsg.read(iprot);
          return autoRunMsg;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case BIND_MSG:
        BindMsg bindMsg = (BindMsg)value_;
        bindMsg.write(oprot);
        return;
      case CHOOSE_MODEL_MSG:
        ChooseModelMsg chooseModelMsg = (ChooseModelMsg)value_;
        chooseModelMsg.write(oprot);
        return;
      case CLAMP_OR_RELEASE_MSG:
        ClampOrReleaseMsg clampOrReleaseMsg = (ClampOrReleaseMsg)value_;
        clampOrReleaseMsg.write(oprot);
        return;
      case OPEN_OR_CLOSE_CAM_MSG:
        OpenOrCloseCamMsg openOrCloseCamMsg = (OpenOrCloseCamMsg)value_;
        openOrCloseCamMsg.write(oprot);
        return;
      case RUN_OR_STOP_MSG:
        RunOrStopMsg runOrStopMsg = (RunOrStopMsg)value_;
        runOrStopMsg.write(oprot);
        return;
      case SET_SYS_PARAM_MSG:
        SetSysParamMsg setSysParamMsg = (SetSysParamMsg)value_;
        setSysParamMsg.write(oprot);
        return;
      case PROGRESS_MSG:
        ProgressMsg progressMsg = (ProgressMsg)value_;
        progressMsg.write(oprot);
        return;
      case MAIN_AXIS_TEMP_MSG:
        MainAxisTempMsg mainAxisTempMsg = (MainAxisTempMsg)value_;
        mainAxisTempMsg.write(oprot);
        return;
      case HULL_TEMP_MSG:
        HullTempMsg hullTempMsg = (HullTempMsg)value_;
        hullTempMsg.write(oprot);
        return;
      case ESTOP_MSG:
        EstopMsg estopMsg = (EstopMsg)value_;
        estopMsg.write(oprot);
        return;
      case HARD_LIMIT_STATUS_MSG:
        HardLimitStatusMsg hardLimitStatusMsg = (HardLimitStatusMsg)value_;
        hardLimitStatusMsg.write(oprot);
        return;
      case HULL_ERROR_MSG:
        HullErrorMsg hullErrorMsg = (HullErrorMsg)value_;
        hullErrorMsg.write(oprot);
        return;
      case KNIFE_ERROR_MSG:
        KnifeErrorMsg knifeErrorMsg = (KnifeErrorMsg)value_;
        knifeErrorMsg.write(oprot);
        return;
      case ERROR_MSG:
        ErrorMsg errorMsg = (ErrorMsg)value_;
        errorMsg.write(oprot);
        return;
      case MPG_MSG:
        MPGMsg mpgMsg = (MPGMsg)value_;
        mpgMsg.write(oprot);
        return;
      case LOGIN_MSG:
        LoginMsg loginMsg = (LoginMsg)value_;
        loginMsg.write(oprot);
        return;
      case ONLINE_STATUS_MSG:
        OnlineStatusMsg onlineStatusMsg = (OnlineStatusMsg)value_;
        onlineStatusMsg.write(oprot);
        return;
      case QUERY_STATUS_MSG:
        QueryStatusMsg queryStatusMsg = (QueryStatusMsg)value_;
        queryStatusMsg.write(oprot);
        return;
      case SET_ACTUAL_COORD_MSG:
        SetActualCoordMsg setActualCoordMsg = (SetActualCoordMsg)value_;
        setActualCoordMsg.write(oprot);
        return;
      case SET_FEED_RATE_MSG:
        SetFeedRateMsg setFeedRateMsg = (SetFeedRateMsg)value_;
        setFeedRateMsg.write(oprot);
        return;
      case QUERY_TIME_MSG:
        QueryTimeMsg queryTimeMsg = (QueryTimeMsg)value_;
        queryTimeMsg.write(oprot);
        return;
      case CAM_PIC_MSG:
        CamPicMsg camPicMsg = (CamPicMsg)value_;
        camPicMsg.write(oprot);
        return;
      case AUTO_RUN_MSG:
        AutoRunNextStepMsg autoRunMsg = (AutoRunNextStepMsg)value_;
        autoRunMsg.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case BIND_MSG:
        return BIND_MSG_FIELD_DESC;
      case CHOOSE_MODEL_MSG:
        return CHOOSE_MODEL_MSG_FIELD_DESC;
      case CLAMP_OR_RELEASE_MSG:
        return CLAMP_OR_RELEASE_MSG_FIELD_DESC;
      case OPEN_OR_CLOSE_CAM_MSG:
        return OPEN_OR_CLOSE_CAM_MSG_FIELD_DESC;
      case RUN_OR_STOP_MSG:
        return RUN_OR_STOP_MSG_FIELD_DESC;
      case SET_SYS_PARAM_MSG:
        return SET_SYS_PARAM_MSG_FIELD_DESC;
      case PROGRESS_MSG:
        return PROGRESS_MSG_FIELD_DESC;
      case MAIN_AXIS_TEMP_MSG:
        return MAIN_AXIS_TEMP_MSG_FIELD_DESC;
      case HULL_TEMP_MSG:
        return HULL_TEMP_MSG_FIELD_DESC;
      case ESTOP_MSG:
        return ESTOP_MSG_FIELD_DESC;
      case HARD_LIMIT_STATUS_MSG:
        return HARD_LIMIT_STATUS_MSG_FIELD_DESC;
      case HULL_ERROR_MSG:
        return HULL_ERROR_MSG_FIELD_DESC;
      case KNIFE_ERROR_MSG:
        return KNIFE_ERROR_MSG_FIELD_DESC;
      case ERROR_MSG:
        return ERROR_MSG_FIELD_DESC;
      case MPG_MSG:
        return MPG_MSG_FIELD_DESC;
      case LOGIN_MSG:
        return LOGIN_MSG_FIELD_DESC;
      case ONLINE_STATUS_MSG:
        return ONLINE_STATUS_MSG_FIELD_DESC;
      case QUERY_STATUS_MSG:
        return QUERY_STATUS_MSG_FIELD_DESC;
      case SET_ACTUAL_COORD_MSG:
        return SET_ACTUAL_COORD_MSG_FIELD_DESC;
      case SET_FEED_RATE_MSG:
        return SET_FEED_RATE_MSG_FIELD_DESC;
      case QUERY_TIME_MSG:
        return QUERY_TIME_MSG_FIELD_DESC;
      case CAM_PIC_MSG:
        return CAM_PIC_MSG_FIELD_DESC;
      case AUTO_RUN_MSG:
        return AUTO_RUN_MSG_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public BindMsg getBindMsg() {
    if (getSetField() == _Fields.BIND_MSG) {
      return (BindMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'bindMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBindMsg(BindMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.BIND_MSG;
    value_ = value;
  }

  public ChooseModelMsg getChooseModelMsg() {
    if (getSetField() == _Fields.CHOOSE_MODEL_MSG) {
      return (ChooseModelMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'chooseModelMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setChooseModelMsg(ChooseModelMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CHOOSE_MODEL_MSG;
    value_ = value;
  }

  public ClampOrReleaseMsg getClampOrReleaseMsg() {
    if (getSetField() == _Fields.CLAMP_OR_RELEASE_MSG) {
      return (ClampOrReleaseMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'clampOrReleaseMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setClampOrReleaseMsg(ClampOrReleaseMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CLAMP_OR_RELEASE_MSG;
    value_ = value;
  }

  public OpenOrCloseCamMsg getOpenOrCloseCamMsg() {
    if (getSetField() == _Fields.OPEN_OR_CLOSE_CAM_MSG) {
      return (OpenOrCloseCamMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'openOrCloseCamMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setOpenOrCloseCamMsg(OpenOrCloseCamMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.OPEN_OR_CLOSE_CAM_MSG;
    value_ = value;
  }

  public RunOrStopMsg getRunOrStopMsg() {
    if (getSetField() == _Fields.RUN_OR_STOP_MSG) {
      return (RunOrStopMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'runOrStopMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRunOrStopMsg(RunOrStopMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.RUN_OR_STOP_MSG;
    value_ = value;
  }

  public SetSysParamMsg getSetSysParamMsg() {
    if (getSetField() == _Fields.SET_SYS_PARAM_MSG) {
      return (SetSysParamMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'setSysParamMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSetSysParamMsg(SetSysParamMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SET_SYS_PARAM_MSG;
    value_ = value;
  }

  public ProgressMsg getProgressMsg() {
    if (getSetField() == _Fields.PROGRESS_MSG) {
      return (ProgressMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'progressMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setProgressMsg(ProgressMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.PROGRESS_MSG;
    value_ = value;
  }

  public MainAxisTempMsg getMainAxisTempMsg() {
    if (getSetField() == _Fields.MAIN_AXIS_TEMP_MSG) {
      return (MainAxisTempMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'mainAxisTempMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMainAxisTempMsg(MainAxisTempMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.MAIN_AXIS_TEMP_MSG;
    value_ = value;
  }

  public HullTempMsg getHullTempMsg() {
    if (getSetField() == _Fields.HULL_TEMP_MSG) {
      return (HullTempMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'hullTempMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHullTempMsg(HullTempMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.HULL_TEMP_MSG;
    value_ = value;
  }

  public EstopMsg getEstopMsg() {
    if (getSetField() == _Fields.ESTOP_MSG) {
      return (EstopMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'estopMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEstopMsg(EstopMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ESTOP_MSG;
    value_ = value;
  }

  public HardLimitStatusMsg getHardLimitStatusMsg() {
    if (getSetField() == _Fields.HARD_LIMIT_STATUS_MSG) {
      return (HardLimitStatusMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'hardLimitStatusMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHardLimitStatusMsg(HardLimitStatusMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.HARD_LIMIT_STATUS_MSG;
    value_ = value;
  }

  public HullErrorMsg getHullErrorMsg() {
    if (getSetField() == _Fields.HULL_ERROR_MSG) {
      return (HullErrorMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'hullErrorMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setHullErrorMsg(HullErrorMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.HULL_ERROR_MSG;
    value_ = value;
  }

  public KnifeErrorMsg getKnifeErrorMsg() {
    if (getSetField() == _Fields.KNIFE_ERROR_MSG) {
      return (KnifeErrorMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'knifeErrorMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setKnifeErrorMsg(KnifeErrorMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.KNIFE_ERROR_MSG;
    value_ = value;
  }

  public ErrorMsg getErrorMsg() {
    if (getSetField() == _Fields.ERROR_MSG) {
      return (ErrorMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'errorMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setErrorMsg(ErrorMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ERROR_MSG;
    value_ = value;
  }

  public MPGMsg getMpgMsg() {
    if (getSetField() == _Fields.MPG_MSG) {
      return (MPGMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'mpgMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setMpgMsg(MPGMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.MPG_MSG;
    value_ = value;
  }

  public LoginMsg getLoginMsg() {
    if (getSetField() == _Fields.LOGIN_MSG) {
      return (LoginMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'loginMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLoginMsg(LoginMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LOGIN_MSG;
    value_ = value;
  }

  public OnlineStatusMsg getOnlineStatusMsg() {
    if (getSetField() == _Fields.ONLINE_STATUS_MSG) {
      return (OnlineStatusMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'onlineStatusMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setOnlineStatusMsg(OnlineStatusMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ONLINE_STATUS_MSG;
    value_ = value;
  }

  public QueryStatusMsg getQueryStatusMsg() {
    if (getSetField() == _Fields.QUERY_STATUS_MSG) {
      return (QueryStatusMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'queryStatusMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setQueryStatusMsg(QueryStatusMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.QUERY_STATUS_MSG;
    value_ = value;
  }

  public SetActualCoordMsg getSetActualCoordMsg() {
    if (getSetField() == _Fields.SET_ACTUAL_COORD_MSG) {
      return (SetActualCoordMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'setActualCoordMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSetActualCoordMsg(SetActualCoordMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SET_ACTUAL_COORD_MSG;
    value_ = value;
  }

  public SetFeedRateMsg getSetFeedRateMsg() {
    if (getSetField() == _Fields.SET_FEED_RATE_MSG) {
      return (SetFeedRateMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'setFeedRateMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSetFeedRateMsg(SetFeedRateMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SET_FEED_RATE_MSG;
    value_ = value;
  }

  public QueryTimeMsg getQueryTimeMsg() {
    if (getSetField() == _Fields.QUERY_TIME_MSG) {
      return (QueryTimeMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'queryTimeMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setQueryTimeMsg(QueryTimeMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.QUERY_TIME_MSG;
    value_ = value;
  }

  public CamPicMsg getCamPicMsg() {
    if (getSetField() == _Fields.CAM_PIC_MSG) {
      return (CamPicMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'camPicMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setCamPicMsg(CamPicMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.CAM_PIC_MSG;
    value_ = value;
  }

  public AutoRunNextStepMsg getAutoRunMsg() {
    if (getSetField() == _Fields.AUTO_RUN_MSG) {
      return (AutoRunNextStepMsg)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'autoRunMsg' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAutoRunMsg(AutoRunNextStepMsg value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.AUTO_RUN_MSG;
    value_ = value;
  }

  public boolean isSetBindMsg() {
    return setField_ == _Fields.BIND_MSG;
  }


  public boolean isSetChooseModelMsg() {
    return setField_ == _Fields.CHOOSE_MODEL_MSG;
  }


  public boolean isSetClampOrReleaseMsg() {
    return setField_ == _Fields.CLAMP_OR_RELEASE_MSG;
  }


  public boolean isSetOpenOrCloseCamMsg() {
    return setField_ == _Fields.OPEN_OR_CLOSE_CAM_MSG;
  }


  public boolean isSetRunOrStopMsg() {
    return setField_ == _Fields.RUN_OR_STOP_MSG;
  }


  public boolean isSetSetSysParamMsg() {
    return setField_ == _Fields.SET_SYS_PARAM_MSG;
  }


  public boolean isSetProgressMsg() {
    return setField_ == _Fields.PROGRESS_MSG;
  }


  public boolean isSetMainAxisTempMsg() {
    return setField_ == _Fields.MAIN_AXIS_TEMP_MSG;
  }


  public boolean isSetHullTempMsg() {
    return setField_ == _Fields.HULL_TEMP_MSG;
  }


  public boolean isSetEstopMsg() {
    return setField_ == _Fields.ESTOP_MSG;
  }


  public boolean isSetHardLimitStatusMsg() {
    return setField_ == _Fields.HARD_LIMIT_STATUS_MSG;
  }


  public boolean isSetHullErrorMsg() {
    return setField_ == _Fields.HULL_ERROR_MSG;
  }


  public boolean isSetKnifeErrorMsg() {
    return setField_ == _Fields.KNIFE_ERROR_MSG;
  }


  public boolean isSetErrorMsg() {
    return setField_ == _Fields.ERROR_MSG;
  }


  public boolean isSetMpgMsg() {
    return setField_ == _Fields.MPG_MSG;
  }


  public boolean isSetLoginMsg() {
    return setField_ == _Fields.LOGIN_MSG;
  }


  public boolean isSetOnlineStatusMsg() {
    return setField_ == _Fields.ONLINE_STATUS_MSG;
  }


  public boolean isSetQueryStatusMsg() {
    return setField_ == _Fields.QUERY_STATUS_MSG;
  }


  public boolean isSetSetActualCoordMsg() {
    return setField_ == _Fields.SET_ACTUAL_COORD_MSG;
  }


  public boolean isSetSetFeedRateMsg() {
    return setField_ == _Fields.SET_FEED_RATE_MSG;
  }


  public boolean isSetQueryTimeMsg() {
    return setField_ == _Fields.QUERY_TIME_MSG;
  }


  public boolean isSetCamPicMsg() {
    return setField_ == _Fields.CAM_PIC_MSG;
  }


  public boolean isSetAutoRunMsg() {
    return setField_ == _Fields.AUTO_RUN_MSG;
  }


  public boolean equals(Object other) {
    if (other instanceof DataBody) {
      return equals((DataBody)other);
    } else {
      return false;
    }
  }

  public boolean equals(DataBody other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(DataBody other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<Object> list = new java.util.ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
