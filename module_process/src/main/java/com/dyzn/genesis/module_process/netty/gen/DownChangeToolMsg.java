package com.dyzn.genesis.module_process.netty.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-08-27")
public class DownChangeToolMsg implements org.apache.thrift.TBase<DownChangeToolMsg, DownChangeToolMsg._Fields>, java.io.Serializable, Cloneable, Comparable<DownChangeToolMsg> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DownChangeToolMsg");

  private static final org.apache.thrift.protocol.TField X_PULSE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("x_pulse_num", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField Y_PULSE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("y_pulse_num", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField Z_PULSE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("z_pulse_num", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DownChangeToolMsgStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DownChangeToolMsgTupleSchemeFactory();

  public long x_pulse_num; // required
  public long y_pulse_num; // required
  public long z_pulse_num; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    X_PULSE_NUM((short)1, "x_pulse_num"),
    Y_PULSE_NUM((short)2, "y_pulse_num"),
    Z_PULSE_NUM((short)3, "z_pulse_num");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // X_PULSE_NUM
          return X_PULSE_NUM;
        case 2: // Y_PULSE_NUM
          return Y_PULSE_NUM;
        case 3: // Z_PULSE_NUM
          return Z_PULSE_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __X_PULSE_NUM_ISSET_ID = 0;
  private static final int __Y_PULSE_NUM_ISSET_ID = 1;
  private static final int __Z_PULSE_NUM_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.X_PULSE_NUM, new org.apache.thrift.meta_data.FieldMetaData("x_pulse_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.Y_PULSE_NUM, new org.apache.thrift.meta_data.FieldMetaData("y_pulse_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.Z_PULSE_NUM, new org.apache.thrift.meta_data.FieldMetaData("z_pulse_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DownChangeToolMsg.class, metaDataMap);
  }

  public DownChangeToolMsg() {
  }

  public DownChangeToolMsg(
    long x_pulse_num,
    long y_pulse_num,
    long z_pulse_num)
  {
    this();
    this.x_pulse_num = x_pulse_num;
    setX_pulse_numIsSet(true);
    this.y_pulse_num = y_pulse_num;
    setY_pulse_numIsSet(true);
    this.z_pulse_num = z_pulse_num;
    setZ_pulse_numIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DownChangeToolMsg(DownChangeToolMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.x_pulse_num = other.x_pulse_num;
    this.y_pulse_num = other.y_pulse_num;
    this.z_pulse_num = other.z_pulse_num;
  }

  public DownChangeToolMsg deepCopy() {
    return new DownChangeToolMsg(this);
  }

  @Override
  public void clear() {
    setX_pulse_numIsSet(false);
    this.x_pulse_num = 0;
    setY_pulse_numIsSet(false);
    this.y_pulse_num = 0;
    setZ_pulse_numIsSet(false);
    this.z_pulse_num = 0;
  }

  public long getX_pulse_num() {
    return this.x_pulse_num;
  }

  public DownChangeToolMsg setX_pulse_num(long x_pulse_num) {
    this.x_pulse_num = x_pulse_num;
    setX_pulse_numIsSet(true);
    return this;
  }

  public void unsetX_pulse_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __X_PULSE_NUM_ISSET_ID);
  }

  /** Returns true if field x_pulse_num is set (has been assigned a value) and false otherwise */
  public boolean isSetX_pulse_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __X_PULSE_NUM_ISSET_ID);
  }

  public void setX_pulse_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __X_PULSE_NUM_ISSET_ID, value);
  }

  public long getY_pulse_num() {
    return this.y_pulse_num;
  }

  public DownChangeToolMsg setY_pulse_num(long y_pulse_num) {
    this.y_pulse_num = y_pulse_num;
    setY_pulse_numIsSet(true);
    return this;
  }

  public void unsetY_pulse_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __Y_PULSE_NUM_ISSET_ID);
  }

  /** Returns true if field y_pulse_num is set (has been assigned a value) and false otherwise */
  public boolean isSetY_pulse_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __Y_PULSE_NUM_ISSET_ID);
  }

  public void setY_pulse_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __Y_PULSE_NUM_ISSET_ID, value);
  }

  public long getZ_pulse_num() {
    return this.z_pulse_num;
  }

  public DownChangeToolMsg setZ_pulse_num(long z_pulse_num) {
    this.z_pulse_num = z_pulse_num;
    setZ_pulse_numIsSet(true);
    return this;
  }

  public void unsetZ_pulse_num() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __Z_PULSE_NUM_ISSET_ID);
  }

  /** Returns true if field z_pulse_num is set (has been assigned a value) and false otherwise */
  public boolean isSetZ_pulse_num() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __Z_PULSE_NUM_ISSET_ID);
  }

  public void setZ_pulse_numIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __Z_PULSE_NUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case X_PULSE_NUM:
      if (value == null) {
        unsetX_pulse_num();
      } else {
        setX_pulse_num((Long)value);
      }
      break;

    case Y_PULSE_NUM:
      if (value == null) {
        unsetY_pulse_num();
      } else {
        setY_pulse_num((Long)value);
      }
      break;

    case Z_PULSE_NUM:
      if (value == null) {
        unsetZ_pulse_num();
      } else {
        setZ_pulse_num((Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case X_PULSE_NUM:
      return getX_pulse_num();

    case Y_PULSE_NUM:
      return getY_pulse_num();

    case Z_PULSE_NUM:
      return getZ_pulse_num();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case X_PULSE_NUM:
      return isSetX_pulse_num();
    case Y_PULSE_NUM:
      return isSetY_pulse_num();
    case Z_PULSE_NUM:
      return isSetZ_pulse_num();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DownChangeToolMsg)
      return this.equals((DownChangeToolMsg)that);
    return false;
  }

  public boolean equals(DownChangeToolMsg that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_x_pulse_num = true;
    boolean that_present_x_pulse_num = true;
    if (this_present_x_pulse_num || that_present_x_pulse_num) {
      if (!(this_present_x_pulse_num && that_present_x_pulse_num))
        return false;
      if (this.x_pulse_num != that.x_pulse_num)
        return false;
    }

    boolean this_present_y_pulse_num = true;
    boolean that_present_y_pulse_num = true;
    if (this_present_y_pulse_num || that_present_y_pulse_num) {
      if (!(this_present_y_pulse_num && that_present_y_pulse_num))
        return false;
      if (this.y_pulse_num != that.y_pulse_num)
        return false;
    }

    boolean this_present_z_pulse_num = true;
    boolean that_present_z_pulse_num = true;
    if (this_present_z_pulse_num || that_present_z_pulse_num) {
      if (!(this_present_z_pulse_num && that_present_z_pulse_num))
        return false;
      if (this.z_pulse_num != that.z_pulse_num)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(x_pulse_num);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(y_pulse_num);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(z_pulse_num);

    return hashCode;
  }

  @Override
  public int compareTo(DownChangeToolMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetX_pulse_num()).compareTo(other.isSetX_pulse_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetX_pulse_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.x_pulse_num, other.x_pulse_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetY_pulse_num()).compareTo(other.isSetY_pulse_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetY_pulse_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.y_pulse_num, other.y_pulse_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZ_pulse_num()).compareTo(other.isSetZ_pulse_num());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZ_pulse_num()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.z_pulse_num, other.z_pulse_num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DownChangeToolMsg(");
    boolean first = true;

    sb.append("x_pulse_num:");
    sb.append(this.x_pulse_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("y_pulse_num:");
    sb.append(this.y_pulse_num);
    first = false;
    if (!first) sb.append(", ");
    sb.append("z_pulse_num:");
    sb.append(this.z_pulse_num);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DownChangeToolMsgStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DownChangeToolMsgStandardScheme getScheme() {
      return new DownChangeToolMsgStandardScheme();
    }
  }

  private static class DownChangeToolMsgStandardScheme extends org.apache.thrift.scheme.StandardScheme<DownChangeToolMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DownChangeToolMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // X_PULSE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.x_pulse_num = iprot.readI64();
              struct.setX_pulse_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // Y_PULSE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.y_pulse_num = iprot.readI64();
              struct.setY_pulse_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // Z_PULSE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.z_pulse_num = iprot.readI64();
              struct.setZ_pulse_numIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DownChangeToolMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(X_PULSE_NUM_FIELD_DESC);
      oprot.writeI64(struct.x_pulse_num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Y_PULSE_NUM_FIELD_DESC);
      oprot.writeI64(struct.y_pulse_num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Z_PULSE_NUM_FIELD_DESC);
      oprot.writeI64(struct.z_pulse_num);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DownChangeToolMsgTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DownChangeToolMsgTupleScheme getScheme() {
      return new DownChangeToolMsgTupleScheme();
    }
  }

  private static class DownChangeToolMsgTupleScheme extends org.apache.thrift.scheme.TupleScheme<DownChangeToolMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DownChangeToolMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetX_pulse_num()) {
        optionals.set(0);
      }
      if (struct.isSetY_pulse_num()) {
        optionals.set(1);
      }
      if (struct.isSetZ_pulse_num()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetX_pulse_num()) {
        oprot.writeI64(struct.x_pulse_num);
      }
      if (struct.isSetY_pulse_num()) {
        oprot.writeI64(struct.y_pulse_num);
      }
      if (struct.isSetZ_pulse_num()) {
        oprot.writeI64(struct.z_pulse_num);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DownChangeToolMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.x_pulse_num = iprot.readI64();
        struct.setX_pulse_numIsSet(true);
      }
      if (incoming.get(1)) {
        struct.y_pulse_num = iprot.readI64();
        struct.setY_pulse_numIsSet(true);
      }
      if (incoming.get(2)) {
        struct.z_pulse_num = iprot.readI64();
        struct.setZ_pulse_numIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

