package com.dyzn.genesis.module_process.netty.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-08-27")
public class SetFeedRateMsg implements org.apache.thrift.TBase<SetFeedRateMsg, SetFeedRateMsg._Fields>, java.io.Serializable, Cloneable, Comparable<SetFeedRateMsg> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SetFeedRateMsg");

  private static final org.apache.thrift.protocol.TField FEED_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("feed_rate", org.apache.thrift.protocol.TType.DOUBLE, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SetFeedRateMsgStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SetFeedRateMsgTupleSchemeFactory();

  public double feed_rate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FEED_RATE((short)1, "feed_rate");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FEED_RATE
          return FEED_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FEED_RATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FEED_RATE, new org.apache.thrift.meta_data.FieldMetaData("feed_rate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SetFeedRateMsg.class, metaDataMap);
  }

  public SetFeedRateMsg() {
  }

  public SetFeedRateMsg(
    double feed_rate)
  {
    this();
    this.feed_rate = feed_rate;
    setFeed_rateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SetFeedRateMsg(SetFeedRateMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.feed_rate = other.feed_rate;
  }

  public SetFeedRateMsg deepCopy() {
    return new SetFeedRateMsg(this);
  }

  @Override
  public void clear() {
    setFeed_rateIsSet(false);
    this.feed_rate = 0.0;
  }

  public double getFeed_rate() {
    return this.feed_rate;
  }

  public SetFeedRateMsg setFeed_rate(double feed_rate) {
    this.feed_rate = feed_rate;
    setFeed_rateIsSet(true);
    return this;
  }

  public void unsetFeed_rate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FEED_RATE_ISSET_ID);
  }

  /** Returns true if field feed_rate is set (has been assigned a value) and false otherwise */
  public boolean isSetFeed_rate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FEED_RATE_ISSET_ID);
  }

  public void setFeed_rateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FEED_RATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case FEED_RATE:
      if (value == null) {
        unsetFeed_rate();
      } else {
        setFeed_rate((Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FEED_RATE:
      return getFeed_rate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FEED_RATE:
      return isSetFeed_rate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SetFeedRateMsg)
      return this.equals((SetFeedRateMsg)that);
    return false;
  }

  public boolean equals(SetFeedRateMsg that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_feed_rate = true;
    boolean that_present_feed_rate = true;
    if (this_present_feed_rate || that_present_feed_rate) {
      if (!(this_present_feed_rate && that_present_feed_rate))
        return false;
      if (this.feed_rate != that.feed_rate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(feed_rate);

    return hashCode;
  }

  @Override
  public int compareTo(SetFeedRateMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFeed_rate()).compareTo(other.isSetFeed_rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeed_rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feed_rate, other.feed_rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SetFeedRateMsg(");
    boolean first = true;

    sb.append("feed_rate:");
    sb.append(this.feed_rate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SetFeedRateMsgStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SetFeedRateMsgStandardScheme getScheme() {
      return new SetFeedRateMsgStandardScheme();
    }
  }

  private static class SetFeedRateMsgStandardScheme extends org.apache.thrift.scheme.StandardScheme<SetFeedRateMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SetFeedRateMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FEED_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.feed_rate = iprot.readDouble();
              struct.setFeed_rateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SetFeedRateMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FEED_RATE_FIELD_DESC);
      oprot.writeDouble(struct.feed_rate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SetFeedRateMsgTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SetFeedRateMsgTupleScheme getScheme() {
      return new SetFeedRateMsgTupleScheme();
    }
  }

  private static class SetFeedRateMsgTupleScheme extends org.apache.thrift.scheme.TupleScheme<SetFeedRateMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SetFeedRateMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFeed_rate()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetFeed_rate()) {
        oprot.writeDouble(struct.feed_rate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SetFeedRateMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.feed_rate = iprot.readDouble();
        struct.setFeed_rateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

