package com.dyzn.genesis.module_process.netty.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-08-27")
public class ProgressMsg implements org.apache.thrift.TBase<ProgressMsg, ProgressMsg._Fields>, java.io.Serializable, Cloneable, Comparable<ProgressMsg> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProgressMsg");

  private static final org.apache.thrift.protocol.TField CUR_LINE_FIELD_DESC = new org.apache.thrift.protocol.TField("curLine", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ALL_LINES_FIELD_DESC = new org.apache.thrift.protocol.TField("allLines", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SCHEDULE_FIELD_DESC = new org.apache.thrift.protocol.TField("schedule", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField POINT1_FIELD_DESC = new org.apache.thrift.protocol.TField("point1", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField POINT2_FIELD_DESC = new org.apache.thrift.protocol.TField("point2", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField POINT3_FIELD_DESC = new org.apache.thrift.protocol.TField("point3", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField POINT4_FIELD_DESC = new org.apache.thrift.protocol.TField("point4", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField POINT5_FIELD_DESC = new org.apache.thrift.protocol.TField("point5", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField POINT6_FIELD_DESC = new org.apache.thrift.protocol.TField("point6", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField POINT7_FIELD_DESC = new org.apache.thrift.protocol.TField("point7", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField POINT8_FIELD_DESC = new org.apache.thrift.protocol.TField("point8", org.apache.thrift.protocol.TType.DOUBLE, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProgressMsgStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProgressMsgTupleSchemeFactory();

  public int curLine; // required
  public int allLines; // required
  public double schedule; // required
  public @org.apache.thrift.annotation.Nullable String time; // required
  public double point1; // required
  public double point2; // required
  public double point3; // required
  public double point4; // required
  public double point5; // required
  public double point6; // required
  public double point7; // required
  public double point8; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CUR_LINE((short)1, "curLine"),
    ALL_LINES((short)2, "allLines"),
    SCHEDULE((short)3, "schedule"),
    TIME((short)4, "time"),
    POINT1((short)5, "point1"),
    POINT2((short)6, "point2"),
    POINT3((short)7, "point3"),
    POINT4((short)8, "point4"),
    POINT5((short)9, "point5"),
    POINT6((short)10, "point6"),
    POINT7((short)11, "point7"),
    POINT8((short)12, "point8");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CUR_LINE
          return CUR_LINE;
        case 2: // ALL_LINES
          return ALL_LINES;
        case 3: // SCHEDULE
          return SCHEDULE;
        case 4: // TIME
          return TIME;
        case 5: // POINT1
          return POINT1;
        case 6: // POINT2
          return POINT2;
        case 7: // POINT3
          return POINT3;
        case 8: // POINT4
          return POINT4;
        case 9: // POINT5
          return POINT5;
        case 10: // POINT6
          return POINT6;
        case 11: // POINT7
          return POINT7;
        case 12: // POINT8
          return POINT8;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURLINE_ISSET_ID = 0;
  private static final int __ALLLINES_ISSET_ID = 1;
  private static final int __SCHEDULE_ISSET_ID = 2;
  private static final int __POINT1_ISSET_ID = 3;
  private static final int __POINT2_ISSET_ID = 4;
  private static final int __POINT3_ISSET_ID = 5;
  private static final int __POINT4_ISSET_ID = 6;
  private static final int __POINT5_ISSET_ID = 7;
  private static final int __POINT6_ISSET_ID = 8;
  private static final int __POINT7_ISSET_ID = 9;
  private static final int __POINT8_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CUR_LINE, new org.apache.thrift.meta_data.FieldMetaData("curLine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALL_LINES, new org.apache.thrift.meta_data.FieldMetaData("allLines", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCHEDULE, new org.apache.thrift.meta_data.FieldMetaData("schedule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POINT1, new org.apache.thrift.meta_data.FieldMetaData("point1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT2, new org.apache.thrift.meta_data.FieldMetaData("point2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT3, new org.apache.thrift.meta_data.FieldMetaData("point3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT4, new org.apache.thrift.meta_data.FieldMetaData("point4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT5, new org.apache.thrift.meta_data.FieldMetaData("point5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT6, new org.apache.thrift.meta_data.FieldMetaData("point6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT7, new org.apache.thrift.meta_data.FieldMetaData("point7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POINT8, new org.apache.thrift.meta_data.FieldMetaData("point8", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProgressMsg.class, metaDataMap);
  }

  public ProgressMsg() {
  }

  public ProgressMsg(
    int curLine,
    int allLines,
    double schedule,
    String time,
    double point1,
    double point2,
    double point3,
    double point4,
    double point5,
    double point6,
    double point7,
    double point8)
  {
    this();
    this.curLine = curLine;
    setCurLineIsSet(true);
    this.allLines = allLines;
    setAllLinesIsSet(true);
    this.schedule = schedule;
    setScheduleIsSet(true);
    this.time = time;
    this.point1 = point1;
    setPoint1IsSet(true);
    this.point2 = point2;
    setPoint2IsSet(true);
    this.point3 = point3;
    setPoint3IsSet(true);
    this.point4 = point4;
    setPoint4IsSet(true);
    this.point5 = point5;
    setPoint5IsSet(true);
    this.point6 = point6;
    setPoint6IsSet(true);
    this.point7 = point7;
    setPoint7IsSet(true);
    this.point8 = point8;
    setPoint8IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProgressMsg(ProgressMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.curLine = other.curLine;
    this.allLines = other.allLines;
    this.schedule = other.schedule;
    if (other.isSetTime()) {
      this.time = other.time;
    }
    this.point1 = other.point1;
    this.point2 = other.point2;
    this.point3 = other.point3;
    this.point4 = other.point4;
    this.point5 = other.point5;
    this.point6 = other.point6;
    this.point7 = other.point7;
    this.point8 = other.point8;
  }

  public ProgressMsg deepCopy() {
    return new ProgressMsg(this);
  }

  @Override
  public void clear() {
    setCurLineIsSet(false);
    this.curLine = 0;
    setAllLinesIsSet(false);
    this.allLines = 0;
    setScheduleIsSet(false);
    this.schedule = 0.0;
    this.time = null;
    setPoint1IsSet(false);
    this.point1 = 0.0;
    setPoint2IsSet(false);
    this.point2 = 0.0;
    setPoint3IsSet(false);
    this.point3 = 0.0;
    setPoint4IsSet(false);
    this.point4 = 0.0;
    setPoint5IsSet(false);
    this.point5 = 0.0;
    setPoint6IsSet(false);
    this.point6 = 0.0;
    setPoint7IsSet(false);
    this.point7 = 0.0;
    setPoint8IsSet(false);
    this.point8 = 0.0;
  }

  public int getCurLine() {
    return this.curLine;
  }

  public ProgressMsg setCurLine(int curLine) {
    this.curLine = curLine;
    setCurLineIsSet(true);
    return this;
  }

  public void unsetCurLine() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURLINE_ISSET_ID);
  }

  /** Returns true if field curLine is set (has been assigned a value) and false otherwise */
  public boolean isSetCurLine() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURLINE_ISSET_ID);
  }

  public void setCurLineIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURLINE_ISSET_ID, value);
  }

  public int getAllLines() {
    return this.allLines;
  }

  public ProgressMsg setAllLines(int allLines) {
    this.allLines = allLines;
    setAllLinesIsSet(true);
    return this;
  }

  public void unsetAllLines() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALLLINES_ISSET_ID);
  }

  /** Returns true if field allLines is set (has been assigned a value) and false otherwise */
  public boolean isSetAllLines() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALLLINES_ISSET_ID);
  }

  public void setAllLinesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALLLINES_ISSET_ID, value);
  }

  public double getSchedule() {
    return this.schedule;
  }

  public ProgressMsg setSchedule(double schedule) {
    this.schedule = schedule;
    setScheduleIsSet(true);
    return this;
  }

  public void unsetSchedule() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCHEDULE_ISSET_ID);
  }

  /** Returns true if field schedule is set (has been assigned a value) and false otherwise */
  public boolean isSetSchedule() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCHEDULE_ISSET_ID);
  }

  public void setScheduleIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCHEDULE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getTime() {
    return this.time;
  }

  public ProgressMsg setTime(@org.apache.thrift.annotation.Nullable String time) {
    this.time = time;
    return this;
  }

  public void unsetTime() {
    this.time = null;
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return this.time != null;
  }

  public void setTimeIsSet(boolean value) {
    if (!value) {
      this.time = null;
    }
  }

  public double getPoint1() {
    return this.point1;
  }

  public ProgressMsg setPoint1(double point1) {
    this.point1 = point1;
    setPoint1IsSet(true);
    return this;
  }

  public void unsetPoint1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POINT1_ISSET_ID);
  }

  /** Returns true if field point1 is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POINT1_ISSET_ID);
  }

  public void setPoint1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POINT1_ISSET_ID, value);
  }

  public double getPoint2() {
    return this.point2;
  }

  public ProgressMsg setPoint2(double point2) {
    this.point2 = point2;
    setPoint2IsSet(true);
    return this;
  }

  public void unsetPoint2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POINT2_ISSET_ID);
  }

  /** Returns true if field point2 is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POINT2_ISSET_ID);
  }

  public void setPoint2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POINT2_ISSET_ID, value);
  }

  public double getPoint3() {
    return this.point3;
  }

  public ProgressMsg setPoint3(double point3) {
    this.point3 = point3;
    setPoint3IsSet(true);
    return this;
  }

  public void unsetPoint3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POINT3_ISSET_ID);
  }

  /** Returns true if field point3 is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POINT3_ISSET_ID);
  }

  public void setPoint3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POINT3_ISSET_ID, value);
  }

  public double getPoint4() {
    return this.point4;
  }

  public ProgressMsg setPoint4(double point4) {
    this.point4 = point4;
    setPoint4IsSet(true);
    return this;
  }

  public void unsetPoint4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POINT4_ISSET_ID);
  }

  /** Returns true if field point4 is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POINT4_ISSET_ID);
  }

  public void setPoint4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POINT4_ISSET_ID, value);
  }

  public double getPoint5() {
    return this.point5;
  }

  public ProgressMsg setPoint5(double point5) {
    this.point5 = point5;
    setPoint5IsSet(true);
    return this;
  }

  public void unsetPoint5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POINT5_ISSET_ID);
  }

  /** Returns true if field point5 is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POINT5_ISSET_ID);
  }

  public void setPoint5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POINT5_ISSET_ID, value);
  }

  public double getPoint6() {
    return this.point6;
  }

  public ProgressMsg setPoint6(double point6) {
    this.point6 = point6;
    setPoint6IsSet(true);
    return this;
  }

  public void unsetPoint6() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POINT6_ISSET_ID);
  }

  /** Returns true if field point6 is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint6() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POINT6_ISSET_ID);
  }

  public void setPoint6IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POINT6_ISSET_ID, value);
  }

  public double getPoint7() {
    return this.point7;
  }

  public ProgressMsg setPoint7(double point7) {
    this.point7 = point7;
    setPoint7IsSet(true);
    return this;
  }

  public void unsetPoint7() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POINT7_ISSET_ID);
  }

  /** Returns true if field point7 is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint7() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POINT7_ISSET_ID);
  }

  public void setPoint7IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POINT7_ISSET_ID, value);
  }

  public double getPoint8() {
    return this.point8;
  }

  public ProgressMsg setPoint8(double point8) {
    this.point8 = point8;
    setPoint8IsSet(true);
    return this;
  }

  public void unsetPoint8() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POINT8_ISSET_ID);
  }

  /** Returns true if field point8 is set (has been assigned a value) and false otherwise */
  public boolean isSetPoint8() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POINT8_ISSET_ID);
  }

  public void setPoint8IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POINT8_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case CUR_LINE:
      if (value == null) {
        unsetCurLine();
      } else {
        setCurLine((Integer)value);
      }
      break;

    case ALL_LINES:
      if (value == null) {
        unsetAllLines();
      } else {
        setAllLines((Integer)value);
      }
      break;

    case SCHEDULE:
      if (value == null) {
        unsetSchedule();
      } else {
        setSchedule((Double)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((String)value);
      }
      break;

    case POINT1:
      if (value == null) {
        unsetPoint1();
      } else {
        setPoint1((Double)value);
      }
      break;

    case POINT2:
      if (value == null) {
        unsetPoint2();
      } else {
        setPoint2((Double)value);
      }
      break;

    case POINT3:
      if (value == null) {
        unsetPoint3();
      } else {
        setPoint3((Double)value);
      }
      break;

    case POINT4:
      if (value == null) {
        unsetPoint4();
      } else {
        setPoint4((Double)value);
      }
      break;

    case POINT5:
      if (value == null) {
        unsetPoint5();
      } else {
        setPoint5((Double)value);
      }
      break;

    case POINT6:
      if (value == null) {
        unsetPoint6();
      } else {
        setPoint6((Double)value);
      }
      break;

    case POINT7:
      if (value == null) {
        unsetPoint7();
      } else {
        setPoint7((Double)value);
      }
      break;

    case POINT8:
      if (value == null) {
        unsetPoint8();
      } else {
        setPoint8((Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CUR_LINE:
      return getCurLine();

    case ALL_LINES:
      return getAllLines();

    case SCHEDULE:
      return getSchedule();

    case TIME:
      return getTime();

    case POINT1:
      return getPoint1();

    case POINT2:
      return getPoint2();

    case POINT3:
      return getPoint3();

    case POINT4:
      return getPoint4();

    case POINT5:
      return getPoint5();

    case POINT6:
      return getPoint6();

    case POINT7:
      return getPoint7();

    case POINT8:
      return getPoint8();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CUR_LINE:
      return isSetCurLine();
    case ALL_LINES:
      return isSetAllLines();
    case SCHEDULE:
      return isSetSchedule();
    case TIME:
      return isSetTime();
    case POINT1:
      return isSetPoint1();
    case POINT2:
      return isSetPoint2();
    case POINT3:
      return isSetPoint3();
    case POINT4:
      return isSetPoint4();
    case POINT5:
      return isSetPoint5();
    case POINT6:
      return isSetPoint6();
    case POINT7:
      return isSetPoint7();
    case POINT8:
      return isSetPoint8();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProgressMsg)
      return this.equals((ProgressMsg)that);
    return false;
  }

  public boolean equals(ProgressMsg that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_curLine = true;
    boolean that_present_curLine = true;
    if (this_present_curLine || that_present_curLine) {
      if (!(this_present_curLine && that_present_curLine))
        return false;
      if (this.curLine != that.curLine)
        return false;
    }

    boolean this_present_allLines = true;
    boolean that_present_allLines = true;
    if (this_present_allLines || that_present_allLines) {
      if (!(this_present_allLines && that_present_allLines))
        return false;
      if (this.allLines != that.allLines)
        return false;
    }

    boolean this_present_schedule = true;
    boolean that_present_schedule = true;
    if (this_present_schedule || that_present_schedule) {
      if (!(this_present_schedule && that_present_schedule))
        return false;
      if (this.schedule != that.schedule)
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (!this.time.equals(that.time))
        return false;
    }

    boolean this_present_point1 = true;
    boolean that_present_point1 = true;
    if (this_present_point1 || that_present_point1) {
      if (!(this_present_point1 && that_present_point1))
        return false;
      if (this.point1 != that.point1)
        return false;
    }

    boolean this_present_point2 = true;
    boolean that_present_point2 = true;
    if (this_present_point2 || that_present_point2) {
      if (!(this_present_point2 && that_present_point2))
        return false;
      if (this.point2 != that.point2)
        return false;
    }

    boolean this_present_point3 = true;
    boolean that_present_point3 = true;
    if (this_present_point3 || that_present_point3) {
      if (!(this_present_point3 && that_present_point3))
        return false;
      if (this.point3 != that.point3)
        return false;
    }

    boolean this_present_point4 = true;
    boolean that_present_point4 = true;
    if (this_present_point4 || that_present_point4) {
      if (!(this_present_point4 && that_present_point4))
        return false;
      if (this.point4 != that.point4)
        return false;
    }

    boolean this_present_point5 = true;
    boolean that_present_point5 = true;
    if (this_present_point5 || that_present_point5) {
      if (!(this_present_point5 && that_present_point5))
        return false;
      if (this.point5 != that.point5)
        return false;
    }

    boolean this_present_point6 = true;
    boolean that_present_point6 = true;
    if (this_present_point6 || that_present_point6) {
      if (!(this_present_point6 && that_present_point6))
        return false;
      if (this.point6 != that.point6)
        return false;
    }

    boolean this_present_point7 = true;
    boolean that_present_point7 = true;
    if (this_present_point7 || that_present_point7) {
      if (!(this_present_point7 && that_present_point7))
        return false;
      if (this.point7 != that.point7)
        return false;
    }

    boolean this_present_point8 = true;
    boolean that_present_point8 = true;
    if (this_present_point8 || that_present_point8) {
      if (!(this_present_point8 && that_present_point8))
        return false;
      if (this.point8 != that.point8)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + curLine;

    hashCode = hashCode * 8191 + allLines;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(schedule);

    hashCode = hashCode * 8191 + ((isSetTime()) ? 131071 : 524287);
    if (isSetTime())
      hashCode = hashCode * 8191 + time.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(point1);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(point2);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(point3);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(point4);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(point5);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(point6);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(point7);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(point8);

    return hashCode;
  }

  @Override
  public int compareTo(ProgressMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCurLine()).compareTo(other.isSetCurLine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurLine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.curLine, other.curLine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAllLines()).compareTo(other.isSetAllLines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllLines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allLines, other.allLines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSchedule()).compareTo(other.isSetSchedule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchedule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schedule, other.schedule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint1()).compareTo(other.isSetPoint1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point1, other.point1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint2()).compareTo(other.isSetPoint2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point2, other.point2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint3()).compareTo(other.isSetPoint3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point3, other.point3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint4()).compareTo(other.isSetPoint4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point4, other.point4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint5()).compareTo(other.isSetPoint5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point5, other.point5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint6()).compareTo(other.isSetPoint6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point6, other.point6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint7()).compareTo(other.isSetPoint7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point7, other.point7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoint8()).compareTo(other.isSetPoint8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoint8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.point8, other.point8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProgressMsg(");
    boolean first = true;

    sb.append("curLine:");
    sb.append(this.curLine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allLines:");
    sb.append(this.allLines);
    first = false;
    if (!first) sb.append(", ");
    sb.append("schedule:");
    sb.append(this.schedule);
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    if (this.time == null) {
      sb.append("null");
    } else {
      sb.append(this.time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("point1:");
    sb.append(this.point1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("point2:");
    sb.append(this.point2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("point3:");
    sb.append(this.point3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("point4:");
    sb.append(this.point4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("point5:");
    sb.append(this.point5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("point6:");
    sb.append(this.point6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("point7:");
    sb.append(this.point7);
    first = false;
    if (!first) sb.append(", ");
    sb.append("point8:");
    sb.append(this.point8);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProgressMsgStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProgressMsgStandardScheme getScheme() {
      return new ProgressMsgStandardScheme();
    }
  }

  private static class ProgressMsgStandardScheme extends org.apache.thrift.scheme.StandardScheme<ProgressMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProgressMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CUR_LINE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.curLine = iprot.readI32();
              struct.setCurLineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALL_LINES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.allLines = iprot.readI32();
              struct.setAllLinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCHEDULE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.schedule = iprot.readDouble();
              struct.setScheduleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time = iprot.readString();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POINT1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.point1 = iprot.readDouble();
              struct.setPoint1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POINT2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.point2 = iprot.readDouble();
              struct.setPoint2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // POINT3
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.point3 = iprot.readDouble();
              struct.setPoint3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POINT4
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.point4 = iprot.readDouble();
              struct.setPoint4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POINT5
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.point5 = iprot.readDouble();
              struct.setPoint5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // POINT6
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.point6 = iprot.readDouble();
              struct.setPoint6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // POINT7
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.point7 = iprot.readDouble();
              struct.setPoint7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // POINT8
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.point8 = iprot.readDouble();
              struct.setPoint8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProgressMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CUR_LINE_FIELD_DESC);
      oprot.writeI32(struct.curLine);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ALL_LINES_FIELD_DESC);
      oprot.writeI32(struct.allLines);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCHEDULE_FIELD_DESC);
      oprot.writeDouble(struct.schedule);
      oprot.writeFieldEnd();
      if (struct.time != null) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeString(struct.time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POINT1_FIELD_DESC);
      oprot.writeDouble(struct.point1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT2_FIELD_DESC);
      oprot.writeDouble(struct.point2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT3_FIELD_DESC);
      oprot.writeDouble(struct.point3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT4_FIELD_DESC);
      oprot.writeDouble(struct.point4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT5_FIELD_DESC);
      oprot.writeDouble(struct.point5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT6_FIELD_DESC);
      oprot.writeDouble(struct.point6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT7_FIELD_DESC);
      oprot.writeDouble(struct.point7);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(POINT8_FIELD_DESC);
      oprot.writeDouble(struct.point8);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProgressMsgTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProgressMsgTupleScheme getScheme() {
      return new ProgressMsgTupleScheme();
    }
  }

  private static class ProgressMsgTupleScheme extends org.apache.thrift.scheme.TupleScheme<ProgressMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProgressMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCurLine()) {
        optionals.set(0);
      }
      if (struct.isSetAllLines()) {
        optionals.set(1);
      }
      if (struct.isSetSchedule()) {
        optionals.set(2);
      }
      if (struct.isSetTime()) {
        optionals.set(3);
      }
      if (struct.isSetPoint1()) {
        optionals.set(4);
      }
      if (struct.isSetPoint2()) {
        optionals.set(5);
      }
      if (struct.isSetPoint3()) {
        optionals.set(6);
      }
      if (struct.isSetPoint4()) {
        optionals.set(7);
      }
      if (struct.isSetPoint5()) {
        optionals.set(8);
      }
      if (struct.isSetPoint6()) {
        optionals.set(9);
      }
      if (struct.isSetPoint7()) {
        optionals.set(10);
      }
      if (struct.isSetPoint8()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetCurLine()) {
        oprot.writeI32(struct.curLine);
      }
      if (struct.isSetAllLines()) {
        oprot.writeI32(struct.allLines);
      }
      if (struct.isSetSchedule()) {
        oprot.writeDouble(struct.schedule);
      }
      if (struct.isSetTime()) {
        oprot.writeString(struct.time);
      }
      if (struct.isSetPoint1()) {
        oprot.writeDouble(struct.point1);
      }
      if (struct.isSetPoint2()) {
        oprot.writeDouble(struct.point2);
      }
      if (struct.isSetPoint3()) {
        oprot.writeDouble(struct.point3);
      }
      if (struct.isSetPoint4()) {
        oprot.writeDouble(struct.point4);
      }
      if (struct.isSetPoint5()) {
        oprot.writeDouble(struct.point5);
      }
      if (struct.isSetPoint6()) {
        oprot.writeDouble(struct.point6);
      }
      if (struct.isSetPoint7()) {
        oprot.writeDouble(struct.point7);
      }
      if (struct.isSetPoint8()) {
        oprot.writeDouble(struct.point8);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProgressMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.curLine = iprot.readI32();
        struct.setCurLineIsSet(true);
      }
      if (incoming.get(1)) {
        struct.allLines = iprot.readI32();
        struct.setAllLinesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.schedule = iprot.readDouble();
        struct.setScheduleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.time = iprot.readString();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.point1 = iprot.readDouble();
        struct.setPoint1IsSet(true);
      }
      if (incoming.get(5)) {
        struct.point2 = iprot.readDouble();
        struct.setPoint2IsSet(true);
      }
      if (incoming.get(6)) {
        struct.point3 = iprot.readDouble();
        struct.setPoint3IsSet(true);
      }
      if (incoming.get(7)) {
        struct.point4 = iprot.readDouble();
        struct.setPoint4IsSet(true);
      }
      if (incoming.get(8)) {
        struct.point5 = iprot.readDouble();
        struct.setPoint5IsSet(true);
      }
      if (incoming.get(9)) {
        struct.point6 = iprot.readDouble();
        struct.setPoint6IsSet(true);
      }
      if (incoming.get(10)) {
        struct.point7 = iprot.readDouble();
        struct.setPoint7IsSet(true);
      }
      if (incoming.get(11)) {
        struct.point8 = iprot.readDouble();
        struct.setPoint8IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

