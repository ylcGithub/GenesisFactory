/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dyzn.genesis.module_process.netty.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-08-27")
public class QueryStatusMsg implements org.apache.thrift.TBase<QueryStatusMsg, QueryStatusMsg._Fields>, java.io.Serializable, Cloneable, Comparable<QueryStatusMsg> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryStatusMsg");

  private static final org.apache.thrift.protocol.TField CURRENT_ROW_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("current_row_number", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ALL_ROW_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("all_row_number", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField NOW_POINT1_FIELD_DESC = new org.apache.thrift.protocol.TField("now_point1", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField NOW_POINT2_FIELD_DESC = new org.apache.thrift.protocol.TField("now_point2", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField NOW_POINT3_FIELD_DESC = new org.apache.thrift.protocol.TField("now_point3", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField NOW_POINT4_FIELD_DESC = new org.apache.thrift.protocol.TField("now_point4", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField NOW_POINT5_FIELD_DESC = new org.apache.thrift.protocol.TField("now_point5", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField NOW_POINT6_FIELD_DESC = new org.apache.thrift.protocol.TField("now_point6", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField NOW_POINT7_FIELD_DESC = new org.apache.thrift.protocol.TField("now_point7", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField NOW_POINT8_FIELD_DESC = new org.apache.thrift.protocol.TField("now_point8", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField STATUS_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("status_msg", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField RUN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("run_status", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ESTOP_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("estop_status", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField AUTO_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("auto_status", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField CLAMP_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("clamp_status", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField RESET_FIELD_DESC = new org.apache.thrift.protocol.TField("reset", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField FEED_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("feed_rate", org.apache.thrift.protocol.TType.DOUBLE, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QueryStatusMsgStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QueryStatusMsgTupleSchemeFactory();

  public int current_row_number; // optional
  public int all_row_number; // optional
  public double progress; // optional
  public double now_point1; // optional
  public double now_point2; // optional
  public double now_point3; // optional
  public double now_point4; // optional
  public double now_point5; // optional
  public double now_point6; // optional
  public double now_point7; // optional
  public double now_point8; // optional
  public @org.apache.thrift.annotation.Nullable String status_msg; // optional
  public int run_status; // optional
  public int estop_status; // optional
  public boolean auto_status; // optional
  public boolean clamp_status; // optional
  public boolean reset; // optional
  public double feed_rate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CURRENT_ROW_NUMBER((short)1, "current_row_number"),
    ALL_ROW_NUMBER((short)2, "all_row_number"),
    PROGRESS((short)3, "progress"),
    NOW_POINT1((short)4, "now_point1"),
    NOW_POINT2((short)5, "now_point2"),
    NOW_POINT3((short)6, "now_point3"),
    NOW_POINT4((short)7, "now_point4"),
    NOW_POINT5((short)8, "now_point5"),
    NOW_POINT6((short)9, "now_point6"),
    NOW_POINT7((short)10, "now_point7"),
    NOW_POINT8((short)11, "now_point8"),
    STATUS_MSG((short)12, "status_msg"),
    RUN_STATUS((short)13, "run_status"),
    ESTOP_STATUS((short)14, "estop_status"),
    AUTO_STATUS((short)15, "auto_status"),
    CLAMP_STATUS((short)16, "clamp_status"),
    RESET((short)17, "reset"),
    FEED_RATE((short)18, "feed_rate");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURRENT_ROW_NUMBER
          return CURRENT_ROW_NUMBER;
        case 2: // ALL_ROW_NUMBER
          return ALL_ROW_NUMBER;
        case 3: // PROGRESS
          return PROGRESS;
        case 4: // NOW_POINT1
          return NOW_POINT1;
        case 5: // NOW_POINT2
          return NOW_POINT2;
        case 6: // NOW_POINT3
          return NOW_POINT3;
        case 7: // NOW_POINT4
          return NOW_POINT4;
        case 8: // NOW_POINT5
          return NOW_POINT5;
        case 9: // NOW_POINT6
          return NOW_POINT6;
        case 10: // NOW_POINT7
          return NOW_POINT7;
        case 11: // NOW_POINT8
          return NOW_POINT8;
        case 12: // STATUS_MSG
          return STATUS_MSG;
        case 13: // RUN_STATUS
          return RUN_STATUS;
        case 14: // ESTOP_STATUS
          return ESTOP_STATUS;
        case 15: // AUTO_STATUS
          return AUTO_STATUS;
        case 16: // CLAMP_STATUS
          return CLAMP_STATUS;
        case 17: // RESET
          return RESET;
        case 18: // FEED_RATE
          return FEED_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CURRENT_ROW_NUMBER_ISSET_ID = 0;
  private static final int __ALL_ROW_NUMBER_ISSET_ID = 1;
  private static final int __PROGRESS_ISSET_ID = 2;
  private static final int __NOW_POINT1_ISSET_ID = 3;
  private static final int __NOW_POINT2_ISSET_ID = 4;
  private static final int __NOW_POINT3_ISSET_ID = 5;
  private static final int __NOW_POINT4_ISSET_ID = 6;
  private static final int __NOW_POINT5_ISSET_ID = 7;
  private static final int __NOW_POINT6_ISSET_ID = 8;
  private static final int __NOW_POINT7_ISSET_ID = 9;
  private static final int __NOW_POINT8_ISSET_ID = 10;
  private static final int __RUN_STATUS_ISSET_ID = 11;
  private static final int __ESTOP_STATUS_ISSET_ID = 12;
  private static final int __AUTO_STATUS_ISSET_ID = 13;
  private static final int __CLAMP_STATUS_ISSET_ID = 14;
  private static final int __RESET_ISSET_ID = 15;
  private static final int __FEED_RATE_ISSET_ID = 16;
  private int __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CURRENT_ROW_NUMBER, _Fields.ALL_ROW_NUMBER, _Fields.PROGRESS, _Fields.NOW_POINT1, _Fields.NOW_POINT2, _Fields.NOW_POINT3, _Fields.NOW_POINT4, _Fields.NOW_POINT5, _Fields.NOW_POINT6, _Fields.NOW_POINT7, _Fields.NOW_POINT8, _Fields.STATUS_MSG, _Fields.RUN_STATUS, _Fields.ESTOP_STATUS, _Fields.AUTO_STATUS, _Fields.CLAMP_STATUS, _Fields.RESET, _Fields.FEED_RATE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURRENT_ROW_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("current_row_number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALL_ROW_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("all_row_number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("progress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOW_POINT1, new org.apache.thrift.meta_data.FieldMetaData("now_point1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOW_POINT2, new org.apache.thrift.meta_data.FieldMetaData("now_point2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOW_POINT3, new org.apache.thrift.meta_data.FieldMetaData("now_point3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOW_POINT4, new org.apache.thrift.meta_data.FieldMetaData("now_point4", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOW_POINT5, new org.apache.thrift.meta_data.FieldMetaData("now_point5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOW_POINT6, new org.apache.thrift.meta_data.FieldMetaData("now_point6", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOW_POINT7, new org.apache.thrift.meta_data.FieldMetaData("now_point7", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NOW_POINT8, new org.apache.thrift.meta_data.FieldMetaData("now_point8", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS_MSG, new org.apache.thrift.meta_data.FieldMetaData("status_msg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUN_STATUS, new org.apache.thrift.meta_data.FieldMetaData("run_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ESTOP_STATUS, new org.apache.thrift.meta_data.FieldMetaData("estop_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AUTO_STATUS, new org.apache.thrift.meta_data.FieldMetaData("auto_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CLAMP_STATUS, new org.apache.thrift.meta_data.FieldMetaData("clamp_status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESET, new org.apache.thrift.meta_data.FieldMetaData("reset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FEED_RATE, new org.apache.thrift.meta_data.FieldMetaData("feed_rate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryStatusMsg.class, metaDataMap);
  }

  public QueryStatusMsg() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryStatusMsg(QueryStatusMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.current_row_number = other.current_row_number;
    this.all_row_number = other.all_row_number;
    this.progress = other.progress;
    this.now_point1 = other.now_point1;
    this.now_point2 = other.now_point2;
    this.now_point3 = other.now_point3;
    this.now_point4 = other.now_point4;
    this.now_point5 = other.now_point5;
    this.now_point6 = other.now_point6;
    this.now_point7 = other.now_point7;
    this.now_point8 = other.now_point8;
    if (other.isSetStatus_msg()) {
      this.status_msg = other.status_msg;
    }
    this.run_status = other.run_status;
    this.estop_status = other.estop_status;
    this.auto_status = other.auto_status;
    this.clamp_status = other.clamp_status;
    this.reset = other.reset;
    this.feed_rate = other.feed_rate;
  }

  public QueryStatusMsg deepCopy() {
    return new QueryStatusMsg(this);
  }

  @Override
  public void clear() {
    setCurrent_row_numberIsSet(false);
    this.current_row_number = 0;
    setAll_row_numberIsSet(false);
    this.all_row_number = 0;
    setProgressIsSet(false);
    this.progress = 0.0;
    setNow_point1IsSet(false);
    this.now_point1 = 0.0;
    setNow_point2IsSet(false);
    this.now_point2 = 0.0;
    setNow_point3IsSet(false);
    this.now_point3 = 0.0;
    setNow_point4IsSet(false);
    this.now_point4 = 0.0;
    setNow_point5IsSet(false);
    this.now_point5 = 0.0;
    setNow_point6IsSet(false);
    this.now_point6 = 0.0;
    setNow_point7IsSet(false);
    this.now_point7 = 0.0;
    setNow_point8IsSet(false);
    this.now_point8 = 0.0;
    this.status_msg = null;
    setRun_statusIsSet(false);
    this.run_status = 0;
    setEstop_statusIsSet(false);
    this.estop_status = 0;
    setAuto_statusIsSet(false);
    this.auto_status = false;
    setClamp_statusIsSet(false);
    this.clamp_status = false;
    setResetIsSet(false);
    this.reset = false;
    setFeed_rateIsSet(false);
    this.feed_rate = 0.0;
  }

  public int getCurrent_row_number() {
    return this.current_row_number;
  }

  public QueryStatusMsg setCurrent_row_number(int current_row_number) {
    this.current_row_number = current_row_number;
    setCurrent_row_numberIsSet(true);
    return this;
  }

  public void unsetCurrent_row_number() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CURRENT_ROW_NUMBER_ISSET_ID);
  }

  /** Returns true if field current_row_number is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrent_row_number() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CURRENT_ROW_NUMBER_ISSET_ID);
  }

  public void setCurrent_row_numberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CURRENT_ROW_NUMBER_ISSET_ID, value);
  }

  public int getAll_row_number() {
    return this.all_row_number;
  }

  public QueryStatusMsg setAll_row_number(int all_row_number) {
    this.all_row_number = all_row_number;
    setAll_row_numberIsSet(true);
    return this;
  }

  public void unsetAll_row_number() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ALL_ROW_NUMBER_ISSET_ID);
  }

  /** Returns true if field all_row_number is set (has been assigned a value) and false otherwise */
  public boolean isSetAll_row_number() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ALL_ROW_NUMBER_ISSET_ID);
  }

  public void setAll_row_numberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ALL_ROW_NUMBER_ISSET_ID, value);
  }

  public double getProgress() {
    return this.progress;
  }

  public QueryStatusMsg setProgress(double progress) {
    this.progress = progress;
    setProgressIsSet(true);
    return this;
  }

  public void unsetProgress() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROGRESS_ISSET_ID);
  }

  /** Returns true if field progress is set (has been assigned a value) and false otherwise */
  public boolean isSetProgress() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROGRESS_ISSET_ID);
  }

  public void setProgressIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROGRESS_ISSET_ID, value);
  }

  public double getNow_point1() {
    return this.now_point1;
  }

  public QueryStatusMsg setNow_point1(double now_point1) {
    this.now_point1 = now_point1;
    setNow_point1IsSet(true);
    return this;
  }

  public void unsetNow_point1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOW_POINT1_ISSET_ID);
  }

  /** Returns true if field now_point1 is set (has been assigned a value) and false otherwise */
  public boolean isSetNow_point1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOW_POINT1_ISSET_ID);
  }

  public void setNow_point1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOW_POINT1_ISSET_ID, value);
  }

  public double getNow_point2() {
    return this.now_point2;
  }

  public QueryStatusMsg setNow_point2(double now_point2) {
    this.now_point2 = now_point2;
    setNow_point2IsSet(true);
    return this;
  }

  public void unsetNow_point2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOW_POINT2_ISSET_ID);
  }

  /** Returns true if field now_point2 is set (has been assigned a value) and false otherwise */
  public boolean isSetNow_point2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOW_POINT2_ISSET_ID);
  }

  public void setNow_point2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOW_POINT2_ISSET_ID, value);
  }

  public double getNow_point3() {
    return this.now_point3;
  }

  public QueryStatusMsg setNow_point3(double now_point3) {
    this.now_point3 = now_point3;
    setNow_point3IsSet(true);
    return this;
  }

  public void unsetNow_point3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOW_POINT3_ISSET_ID);
  }

  /** Returns true if field now_point3 is set (has been assigned a value) and false otherwise */
  public boolean isSetNow_point3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOW_POINT3_ISSET_ID);
  }

  public void setNow_point3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOW_POINT3_ISSET_ID, value);
  }

  public double getNow_point4() {
    return this.now_point4;
  }

  public QueryStatusMsg setNow_point4(double now_point4) {
    this.now_point4 = now_point4;
    setNow_point4IsSet(true);
    return this;
  }

  public void unsetNow_point4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOW_POINT4_ISSET_ID);
  }

  /** Returns true if field now_point4 is set (has been assigned a value) and false otherwise */
  public boolean isSetNow_point4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOW_POINT4_ISSET_ID);
  }

  public void setNow_point4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOW_POINT4_ISSET_ID, value);
  }

  public double getNow_point5() {
    return this.now_point5;
  }

  public QueryStatusMsg setNow_point5(double now_point5) {
    this.now_point5 = now_point5;
    setNow_point5IsSet(true);
    return this;
  }

  public void unsetNow_point5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOW_POINT5_ISSET_ID);
  }

  /** Returns true if field now_point5 is set (has been assigned a value) and false otherwise */
  public boolean isSetNow_point5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOW_POINT5_ISSET_ID);
  }

  public void setNow_point5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOW_POINT5_ISSET_ID, value);
  }

  public double getNow_point6() {
    return this.now_point6;
  }

  public QueryStatusMsg setNow_point6(double now_point6) {
    this.now_point6 = now_point6;
    setNow_point6IsSet(true);
    return this;
  }

  public void unsetNow_point6() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOW_POINT6_ISSET_ID);
  }

  /** Returns true if field now_point6 is set (has been assigned a value) and false otherwise */
  public boolean isSetNow_point6() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOW_POINT6_ISSET_ID);
  }

  public void setNow_point6IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOW_POINT6_ISSET_ID, value);
  }

  public double getNow_point7() {
    return this.now_point7;
  }

  public QueryStatusMsg setNow_point7(double now_point7) {
    this.now_point7 = now_point7;
    setNow_point7IsSet(true);
    return this;
  }

  public void unsetNow_point7() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOW_POINT7_ISSET_ID);
  }

  /** Returns true if field now_point7 is set (has been assigned a value) and false otherwise */
  public boolean isSetNow_point7() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOW_POINT7_ISSET_ID);
  }

  public void setNow_point7IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOW_POINT7_ISSET_ID, value);
  }

  public double getNow_point8() {
    return this.now_point8;
  }

  public QueryStatusMsg setNow_point8(double now_point8) {
    this.now_point8 = now_point8;
    setNow_point8IsSet(true);
    return this;
  }

  public void unsetNow_point8() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOW_POINT8_ISSET_ID);
  }

  /** Returns true if field now_point8 is set (has been assigned a value) and false otherwise */
  public boolean isSetNow_point8() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOW_POINT8_ISSET_ID);
  }

  public void setNow_point8IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOW_POINT8_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public String getStatus_msg() {
    return this.status_msg;
  }

  public QueryStatusMsg setStatus_msg(@org.apache.thrift.annotation.Nullable String status_msg) {
    this.status_msg = status_msg;
    return this;
  }

  public void unsetStatus_msg() {
    this.status_msg = null;
  }

  /** Returns true if field status_msg is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus_msg() {
    return this.status_msg != null;
  }

  public void setStatus_msgIsSet(boolean value) {
    if (!value) {
      this.status_msg = null;
    }
  }

  public int getRun_status() {
    return this.run_status;
  }

  public QueryStatusMsg setRun_status(int run_status) {
    this.run_status = run_status;
    setRun_statusIsSet(true);
    return this;
  }

  public void unsetRun_status() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUN_STATUS_ISSET_ID);
  }

  /** Returns true if field run_status is set (has been assigned a value) and false otherwise */
  public boolean isSetRun_status() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUN_STATUS_ISSET_ID);
  }

  public void setRun_statusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUN_STATUS_ISSET_ID, value);
  }

  public int getEstop_status() {
    return this.estop_status;
  }

  public QueryStatusMsg setEstop_status(int estop_status) {
    this.estop_status = estop_status;
    setEstop_statusIsSet(true);
    return this;
  }

  public void unsetEstop_status() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ESTOP_STATUS_ISSET_ID);
  }

  /** Returns true if field estop_status is set (has been assigned a value) and false otherwise */
  public boolean isSetEstop_status() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ESTOP_STATUS_ISSET_ID);
  }

  public void setEstop_statusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ESTOP_STATUS_ISSET_ID, value);
  }

  public boolean isAuto_status() {
    return this.auto_status;
  }

  public QueryStatusMsg setAuto_status(boolean auto_status) {
    this.auto_status = auto_status;
    setAuto_statusIsSet(true);
    return this;
  }

  public void unsetAuto_status() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTO_STATUS_ISSET_ID);
  }

  /** Returns true if field auto_status is set (has been assigned a value) and false otherwise */
  public boolean isSetAuto_status() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTO_STATUS_ISSET_ID);
  }

  public void setAuto_statusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTO_STATUS_ISSET_ID, value);
  }

  public boolean isClamp_status() {
    return this.clamp_status;
  }

  public QueryStatusMsg setClamp_status(boolean clamp_status) {
    this.clamp_status = clamp_status;
    setClamp_statusIsSet(true);
    return this;
  }

  public void unsetClamp_status() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLAMP_STATUS_ISSET_ID);
  }

  /** Returns true if field clamp_status is set (has been assigned a value) and false otherwise */
  public boolean isSetClamp_status() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLAMP_STATUS_ISSET_ID);
  }

  public void setClamp_statusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLAMP_STATUS_ISSET_ID, value);
  }

  public boolean isReset() {
    return this.reset;
  }

  public QueryStatusMsg setReset(boolean reset) {
    this.reset = reset;
    setResetIsSet(true);
    return this;
  }

  public void unsetReset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESET_ISSET_ID);
  }

  /** Returns true if field reset is set (has been assigned a value) and false otherwise */
  public boolean isSetReset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESET_ISSET_ID);
  }

  public void setResetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESET_ISSET_ID, value);
  }

  public double getFeed_rate() {
    return this.feed_rate;
  }

  public QueryStatusMsg setFeed_rate(double feed_rate) {
    this.feed_rate = feed_rate;
    setFeed_rateIsSet(true);
    return this;
  }

  public void unsetFeed_rate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FEED_RATE_ISSET_ID);
  }

  /** Returns true if field feed_rate is set (has been assigned a value) and false otherwise */
  public boolean isSetFeed_rate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FEED_RATE_ISSET_ID);
  }

  public void setFeed_rateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FEED_RATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
    switch (field) {
    case CURRENT_ROW_NUMBER:
      if (value == null) {
        unsetCurrent_row_number();
      } else {
        setCurrent_row_number((Integer)value);
      }
      break;

    case ALL_ROW_NUMBER:
      if (value == null) {
        unsetAll_row_number();
      } else {
        setAll_row_number((Integer)value);
      }
      break;

    case PROGRESS:
      if (value == null) {
        unsetProgress();
      } else {
        setProgress((Double)value);
      }
      break;

    case NOW_POINT1:
      if (value == null) {
        unsetNow_point1();
      } else {
        setNow_point1((Double)value);
      }
      break;

    case NOW_POINT2:
      if (value == null) {
        unsetNow_point2();
      } else {
        setNow_point2((Double)value);
      }
      break;

    case NOW_POINT3:
      if (value == null) {
        unsetNow_point3();
      } else {
        setNow_point3((Double)value);
      }
      break;

    case NOW_POINT4:
      if (value == null) {
        unsetNow_point4();
      } else {
        setNow_point4((Double)value);
      }
      break;

    case NOW_POINT5:
      if (value == null) {
        unsetNow_point5();
      } else {
        setNow_point5((Double)value);
      }
      break;

    case NOW_POINT6:
      if (value == null) {
        unsetNow_point6();
      } else {
        setNow_point6((Double)value);
      }
      break;

    case NOW_POINT7:
      if (value == null) {
        unsetNow_point7();
      } else {
        setNow_point7((Double)value);
      }
      break;

    case NOW_POINT8:
      if (value == null) {
        unsetNow_point8();
      } else {
        setNow_point8((Double)value);
      }
      break;

    case STATUS_MSG:
      if (value == null) {
        unsetStatus_msg();
      } else {
        setStatus_msg((String)value);
      }
      break;

    case RUN_STATUS:
      if (value == null) {
        unsetRun_status();
      } else {
        setRun_status((Integer)value);
      }
      break;

    case ESTOP_STATUS:
      if (value == null) {
        unsetEstop_status();
      } else {
        setEstop_status((Integer)value);
      }
      break;

    case AUTO_STATUS:
      if (value == null) {
        unsetAuto_status();
      } else {
        setAuto_status((Boolean)value);
      }
      break;

    case CLAMP_STATUS:
      if (value == null) {
        unsetClamp_status();
      } else {
        setClamp_status((Boolean)value);
      }
      break;

    case RESET:
      if (value == null) {
        unsetReset();
      } else {
        setReset((Boolean)value);
      }
      break;

    case FEED_RATE:
      if (value == null) {
        unsetFeed_rate();
      } else {
        setFeed_rate((Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CURRENT_ROW_NUMBER:
      return getCurrent_row_number();

    case ALL_ROW_NUMBER:
      return getAll_row_number();

    case PROGRESS:
      return getProgress();

    case NOW_POINT1:
      return getNow_point1();

    case NOW_POINT2:
      return getNow_point2();

    case NOW_POINT3:
      return getNow_point3();

    case NOW_POINT4:
      return getNow_point4();

    case NOW_POINT5:
      return getNow_point5();

    case NOW_POINT6:
      return getNow_point6();

    case NOW_POINT7:
      return getNow_point7();

    case NOW_POINT8:
      return getNow_point8();

    case STATUS_MSG:
      return getStatus_msg();

    case RUN_STATUS:
      return getRun_status();

    case ESTOP_STATUS:
      return getEstop_status();

    case AUTO_STATUS:
      return isAuto_status();

    case CLAMP_STATUS:
      return isClamp_status();

    case RESET:
      return isReset();

    case FEED_RATE:
      return getFeed_rate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CURRENT_ROW_NUMBER:
      return isSetCurrent_row_number();
    case ALL_ROW_NUMBER:
      return isSetAll_row_number();
    case PROGRESS:
      return isSetProgress();
    case NOW_POINT1:
      return isSetNow_point1();
    case NOW_POINT2:
      return isSetNow_point2();
    case NOW_POINT3:
      return isSetNow_point3();
    case NOW_POINT4:
      return isSetNow_point4();
    case NOW_POINT5:
      return isSetNow_point5();
    case NOW_POINT6:
      return isSetNow_point6();
    case NOW_POINT7:
      return isSetNow_point7();
    case NOW_POINT8:
      return isSetNow_point8();
    case STATUS_MSG:
      return isSetStatus_msg();
    case RUN_STATUS:
      return isSetRun_status();
    case ESTOP_STATUS:
      return isSetEstop_status();
    case AUTO_STATUS:
      return isSetAuto_status();
    case CLAMP_STATUS:
      return isSetClamp_status();
    case RESET:
      return isSetReset();
    case FEED_RATE:
      return isSetFeed_rate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryStatusMsg)
      return this.equals((QueryStatusMsg)that);
    return false;
  }

  public boolean equals(QueryStatusMsg that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_current_row_number = true && this.isSetCurrent_row_number();
    boolean that_present_current_row_number = true && that.isSetCurrent_row_number();
    if (this_present_current_row_number || that_present_current_row_number) {
      if (!(this_present_current_row_number && that_present_current_row_number))
        return false;
      if (this.current_row_number != that.current_row_number)
        return false;
    }

    boolean this_present_all_row_number = true && this.isSetAll_row_number();
    boolean that_present_all_row_number = true && that.isSetAll_row_number();
    if (this_present_all_row_number || that_present_all_row_number) {
      if (!(this_present_all_row_number && that_present_all_row_number))
        return false;
      if (this.all_row_number != that.all_row_number)
        return false;
    }

    boolean this_present_progress = true && this.isSetProgress();
    boolean that_present_progress = true && that.isSetProgress();
    if (this_present_progress || that_present_progress) {
      if (!(this_present_progress && that_present_progress))
        return false;
      if (this.progress != that.progress)
        return false;
    }

    boolean this_present_now_point1 = true && this.isSetNow_point1();
    boolean that_present_now_point1 = true && that.isSetNow_point1();
    if (this_present_now_point1 || that_present_now_point1) {
      if (!(this_present_now_point1 && that_present_now_point1))
        return false;
      if (this.now_point1 != that.now_point1)
        return false;
    }

    boolean this_present_now_point2 = true && this.isSetNow_point2();
    boolean that_present_now_point2 = true && that.isSetNow_point2();
    if (this_present_now_point2 || that_present_now_point2) {
      if (!(this_present_now_point2 && that_present_now_point2))
        return false;
      if (this.now_point2 != that.now_point2)
        return false;
    }

    boolean this_present_now_point3 = true && this.isSetNow_point3();
    boolean that_present_now_point3 = true && that.isSetNow_point3();
    if (this_present_now_point3 || that_present_now_point3) {
      if (!(this_present_now_point3 && that_present_now_point3))
        return false;
      if (this.now_point3 != that.now_point3)
        return false;
    }

    boolean this_present_now_point4 = true && this.isSetNow_point4();
    boolean that_present_now_point4 = true && that.isSetNow_point4();
    if (this_present_now_point4 || that_present_now_point4) {
      if (!(this_present_now_point4 && that_present_now_point4))
        return false;
      if (this.now_point4 != that.now_point4)
        return false;
    }

    boolean this_present_now_point5 = true && this.isSetNow_point5();
    boolean that_present_now_point5 = true && that.isSetNow_point5();
    if (this_present_now_point5 || that_present_now_point5) {
      if (!(this_present_now_point5 && that_present_now_point5))
        return false;
      if (this.now_point5 != that.now_point5)
        return false;
    }

    boolean this_present_now_point6 = true && this.isSetNow_point6();
    boolean that_present_now_point6 = true && that.isSetNow_point6();
    if (this_present_now_point6 || that_present_now_point6) {
      if (!(this_present_now_point6 && that_present_now_point6))
        return false;
      if (this.now_point6 != that.now_point6)
        return false;
    }

    boolean this_present_now_point7 = true && this.isSetNow_point7();
    boolean that_present_now_point7 = true && that.isSetNow_point7();
    if (this_present_now_point7 || that_present_now_point7) {
      if (!(this_present_now_point7 && that_present_now_point7))
        return false;
      if (this.now_point7 != that.now_point7)
        return false;
    }

    boolean this_present_now_point8 = true && this.isSetNow_point8();
    boolean that_present_now_point8 = true && that.isSetNow_point8();
    if (this_present_now_point8 || that_present_now_point8) {
      if (!(this_present_now_point8 && that_present_now_point8))
        return false;
      if (this.now_point8 != that.now_point8)
        return false;
    }

    boolean this_present_status_msg = true && this.isSetStatus_msg();
    boolean that_present_status_msg = true && that.isSetStatus_msg();
    if (this_present_status_msg || that_present_status_msg) {
      if (!(this_present_status_msg && that_present_status_msg))
        return false;
      if (!this.status_msg.equals(that.status_msg))
        return false;
    }

    boolean this_present_run_status = true && this.isSetRun_status();
    boolean that_present_run_status = true && that.isSetRun_status();
    if (this_present_run_status || that_present_run_status) {
      if (!(this_present_run_status && that_present_run_status))
        return false;
      if (this.run_status != that.run_status)
        return false;
    }

    boolean this_present_estop_status = true && this.isSetEstop_status();
    boolean that_present_estop_status = true && that.isSetEstop_status();
    if (this_present_estop_status || that_present_estop_status) {
      if (!(this_present_estop_status && that_present_estop_status))
        return false;
      if (this.estop_status != that.estop_status)
        return false;
    }

    boolean this_present_auto_status = true && this.isSetAuto_status();
    boolean that_present_auto_status = true && that.isSetAuto_status();
    if (this_present_auto_status || that_present_auto_status) {
      if (!(this_present_auto_status && that_present_auto_status))
        return false;
      if (this.auto_status != that.auto_status)
        return false;
    }

    boolean this_present_clamp_status = true && this.isSetClamp_status();
    boolean that_present_clamp_status = true && that.isSetClamp_status();
    if (this_present_clamp_status || that_present_clamp_status) {
      if (!(this_present_clamp_status && that_present_clamp_status))
        return false;
      if (this.clamp_status != that.clamp_status)
        return false;
    }

    boolean this_present_reset = true && this.isSetReset();
    boolean that_present_reset = true && that.isSetReset();
    if (this_present_reset || that_present_reset) {
      if (!(this_present_reset && that_present_reset))
        return false;
      if (this.reset != that.reset)
        return false;
    }

    boolean this_present_feed_rate = true && this.isSetFeed_rate();
    boolean that_present_feed_rate = true && that.isSetFeed_rate();
    if (this_present_feed_rate || that_present_feed_rate) {
      if (!(this_present_feed_rate && that_present_feed_rate))
        return false;
      if (this.feed_rate != that.feed_rate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCurrent_row_number()) ? 131071 : 524287);
    if (isSetCurrent_row_number())
      hashCode = hashCode * 8191 + current_row_number;

    hashCode = hashCode * 8191 + ((isSetAll_row_number()) ? 131071 : 524287);
    if (isSetAll_row_number())
      hashCode = hashCode * 8191 + all_row_number;

    hashCode = hashCode * 8191 + ((isSetProgress()) ? 131071 : 524287);
    if (isSetProgress())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(progress);

    hashCode = hashCode * 8191 + ((isSetNow_point1()) ? 131071 : 524287);
    if (isSetNow_point1())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(now_point1);

    hashCode = hashCode * 8191 + ((isSetNow_point2()) ? 131071 : 524287);
    if (isSetNow_point2())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(now_point2);

    hashCode = hashCode * 8191 + ((isSetNow_point3()) ? 131071 : 524287);
    if (isSetNow_point3())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(now_point3);

    hashCode = hashCode * 8191 + ((isSetNow_point4()) ? 131071 : 524287);
    if (isSetNow_point4())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(now_point4);

    hashCode = hashCode * 8191 + ((isSetNow_point5()) ? 131071 : 524287);
    if (isSetNow_point5())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(now_point5);

    hashCode = hashCode * 8191 + ((isSetNow_point6()) ? 131071 : 524287);
    if (isSetNow_point6())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(now_point6);

    hashCode = hashCode * 8191 + ((isSetNow_point7()) ? 131071 : 524287);
    if (isSetNow_point7())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(now_point7);

    hashCode = hashCode * 8191 + ((isSetNow_point8()) ? 131071 : 524287);
    if (isSetNow_point8())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(now_point8);

    hashCode = hashCode * 8191 + ((isSetStatus_msg()) ? 131071 : 524287);
    if (isSetStatus_msg())
      hashCode = hashCode * 8191 + status_msg.hashCode();

    hashCode = hashCode * 8191 + ((isSetRun_status()) ? 131071 : 524287);
    if (isSetRun_status())
      hashCode = hashCode * 8191 + run_status;

    hashCode = hashCode * 8191 + ((isSetEstop_status()) ? 131071 : 524287);
    if (isSetEstop_status())
      hashCode = hashCode * 8191 + estop_status;

    hashCode = hashCode * 8191 + ((isSetAuto_status()) ? 131071 : 524287);
    if (isSetAuto_status())
      hashCode = hashCode * 8191 + ((auto_status) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetClamp_status()) ? 131071 : 524287);
    if (isSetClamp_status())
      hashCode = hashCode * 8191 + ((clamp_status) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetReset()) ? 131071 : 524287);
    if (isSetReset())
      hashCode = hashCode * 8191 + ((reset) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetFeed_rate()) ? 131071 : 524287);
    if (isSetFeed_rate())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(feed_rate);

    return hashCode;
  }

  @Override
  public int compareTo(QueryStatusMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCurrent_row_number()).compareTo(other.isSetCurrent_row_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrent_row_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.current_row_number, other.current_row_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAll_row_number()).compareTo(other.isSetAll_row_number());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAll_row_number()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.all_row_number, other.all_row_number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProgress()).compareTo(other.isSetProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress, other.progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNow_point1()).compareTo(other.isSetNow_point1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNow_point1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.now_point1, other.now_point1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNow_point2()).compareTo(other.isSetNow_point2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNow_point2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.now_point2, other.now_point2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNow_point3()).compareTo(other.isSetNow_point3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNow_point3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.now_point3, other.now_point3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNow_point4()).compareTo(other.isSetNow_point4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNow_point4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.now_point4, other.now_point4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNow_point5()).compareTo(other.isSetNow_point5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNow_point5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.now_point5, other.now_point5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNow_point6()).compareTo(other.isSetNow_point6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNow_point6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.now_point6, other.now_point6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNow_point7()).compareTo(other.isSetNow_point7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNow_point7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.now_point7, other.now_point7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNow_point8()).compareTo(other.isSetNow_point8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNow_point8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.now_point8, other.now_point8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus_msg()).compareTo(other.isSetStatus_msg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus_msg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status_msg, other.status_msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRun_status()).compareTo(other.isSetRun_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRun_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.run_status, other.run_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEstop_status()).compareTo(other.isSetEstop_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEstop_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.estop_status, other.estop_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuto_status()).compareTo(other.isSetAuto_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuto_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auto_status, other.auto_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClamp_status()).compareTo(other.isSetClamp_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClamp_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clamp_status, other.clamp_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReset()).compareTo(other.isSetReset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reset, other.reset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeed_rate()).compareTo(other.isSetFeed_rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeed_rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feed_rate, other.feed_rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryStatusMsg(");
    boolean first = true;

    if (isSetCurrent_row_number()) {
      sb.append("current_row_number:");
      sb.append(this.current_row_number);
      first = false;
    }
    if (isSetAll_row_number()) {
      if (!first) sb.append(", ");
      sb.append("all_row_number:");
      sb.append(this.all_row_number);
      first = false;
    }
    if (isSetProgress()) {
      if (!first) sb.append(", ");
      sb.append("progress:");
      sb.append(this.progress);
      first = false;
    }
    if (isSetNow_point1()) {
      if (!first) sb.append(", ");
      sb.append("now_point1:");
      sb.append(this.now_point1);
      first = false;
    }
    if (isSetNow_point2()) {
      if (!first) sb.append(", ");
      sb.append("now_point2:");
      sb.append(this.now_point2);
      first = false;
    }
    if (isSetNow_point3()) {
      if (!first) sb.append(", ");
      sb.append("now_point3:");
      sb.append(this.now_point3);
      first = false;
    }
    if (isSetNow_point4()) {
      if (!first) sb.append(", ");
      sb.append("now_point4:");
      sb.append(this.now_point4);
      first = false;
    }
    if (isSetNow_point5()) {
      if (!first) sb.append(", ");
      sb.append("now_point5:");
      sb.append(this.now_point5);
      first = false;
    }
    if (isSetNow_point6()) {
      if (!first) sb.append(", ");
      sb.append("now_point6:");
      sb.append(this.now_point6);
      first = false;
    }
    if (isSetNow_point7()) {
      if (!first) sb.append(", ");
      sb.append("now_point7:");
      sb.append(this.now_point7);
      first = false;
    }
    if (isSetNow_point8()) {
      if (!first) sb.append(", ");
      sb.append("now_point8:");
      sb.append(this.now_point8);
      first = false;
    }
    if (isSetStatus_msg()) {
      if (!first) sb.append(", ");
      sb.append("status_msg:");
      if (this.status_msg == null) {
        sb.append("null");
      } else {
        sb.append(this.status_msg);
      }
      first = false;
    }
    if (isSetRun_status()) {
      if (!first) sb.append(", ");
      sb.append("run_status:");
      sb.append(this.run_status);
      first = false;
    }
    if (isSetEstop_status()) {
      if (!first) sb.append(", ");
      sb.append("estop_status:");
      sb.append(this.estop_status);
      first = false;
    }
    if (isSetAuto_status()) {
      if (!first) sb.append(", ");
      sb.append("auto_status:");
      sb.append(this.auto_status);
      first = false;
    }
    if (isSetClamp_status()) {
      if (!first) sb.append(", ");
      sb.append("clamp_status:");
      sb.append(this.clamp_status);
      first = false;
    }
    if (isSetReset()) {
      if (!first) sb.append(", ");
      sb.append("reset:");
      sb.append(this.reset);
      first = false;
    }
    if (isSetFeed_rate()) {
      if (!first) sb.append(", ");
      sb.append("feed_rate:");
      sb.append(this.feed_rate);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryStatusMsgStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QueryStatusMsgStandardScheme getScheme() {
      return new QueryStatusMsgStandardScheme();
    }
  }

  private static class QueryStatusMsgStandardScheme extends org.apache.thrift.scheme.StandardScheme<QueryStatusMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryStatusMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CURRENT_ROW_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.current_row_number = iprot.readI32();
              struct.setCurrent_row_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ALL_ROW_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.all_row_number = iprot.readI32();
              struct.setAll_row_numberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.progress = iprot.readDouble();
              struct.setProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NOW_POINT1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.now_point1 = iprot.readDouble();
              struct.setNow_point1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NOW_POINT2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.now_point2 = iprot.readDouble();
              struct.setNow_point2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOW_POINT3
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.now_point3 = iprot.readDouble();
              struct.setNow_point3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NOW_POINT4
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.now_point4 = iprot.readDouble();
              struct.setNow_point4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NOW_POINT5
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.now_point5 = iprot.readDouble();
              struct.setNow_point5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NOW_POINT6
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.now_point6 = iprot.readDouble();
              struct.setNow_point6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NOW_POINT7
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.now_point7 = iprot.readDouble();
              struct.setNow_point7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NOW_POINT8
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.now_point8 = iprot.readDouble();
              struct.setNow_point8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // STATUS_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status_msg = iprot.readString();
              struct.setStatus_msgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RUN_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.run_status = iprot.readI32();
              struct.setRun_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ESTOP_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.estop_status = iprot.readI32();
              struct.setEstop_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // AUTO_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.auto_status = iprot.readBool();
              struct.setAuto_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CLAMP_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.clamp_status = iprot.readBool();
              struct.setClamp_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RESET
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.reset = iprot.readBool();
              struct.setResetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FEED_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.feed_rate = iprot.readDouble();
              struct.setFeed_rateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryStatusMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCurrent_row_number()) {
        oprot.writeFieldBegin(CURRENT_ROW_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.current_row_number);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAll_row_number()) {
        oprot.writeFieldBegin(ALL_ROW_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.all_row_number);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProgress()) {
        oprot.writeFieldBegin(PROGRESS_FIELD_DESC);
        oprot.writeDouble(struct.progress);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNow_point1()) {
        oprot.writeFieldBegin(NOW_POINT1_FIELD_DESC);
        oprot.writeDouble(struct.now_point1);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNow_point2()) {
        oprot.writeFieldBegin(NOW_POINT2_FIELD_DESC);
        oprot.writeDouble(struct.now_point2);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNow_point3()) {
        oprot.writeFieldBegin(NOW_POINT3_FIELD_DESC);
        oprot.writeDouble(struct.now_point3);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNow_point4()) {
        oprot.writeFieldBegin(NOW_POINT4_FIELD_DESC);
        oprot.writeDouble(struct.now_point4);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNow_point5()) {
        oprot.writeFieldBegin(NOW_POINT5_FIELD_DESC);
        oprot.writeDouble(struct.now_point5);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNow_point6()) {
        oprot.writeFieldBegin(NOW_POINT6_FIELD_DESC);
        oprot.writeDouble(struct.now_point6);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNow_point7()) {
        oprot.writeFieldBegin(NOW_POINT7_FIELD_DESC);
        oprot.writeDouble(struct.now_point7);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNow_point8()) {
        oprot.writeFieldBegin(NOW_POINT8_FIELD_DESC);
        oprot.writeDouble(struct.now_point8);
        oprot.writeFieldEnd();
      }
      if (struct.status_msg != null) {
        if (struct.isSetStatus_msg()) {
          oprot.writeFieldBegin(STATUS_MSG_FIELD_DESC);
          oprot.writeString(struct.status_msg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRun_status()) {
        oprot.writeFieldBegin(RUN_STATUS_FIELD_DESC);
        oprot.writeI32(struct.run_status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEstop_status()) {
        oprot.writeFieldBegin(ESTOP_STATUS_FIELD_DESC);
        oprot.writeI32(struct.estop_status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAuto_status()) {
        oprot.writeFieldBegin(AUTO_STATUS_FIELD_DESC);
        oprot.writeBool(struct.auto_status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClamp_status()) {
        oprot.writeFieldBegin(CLAMP_STATUS_FIELD_DESC);
        oprot.writeBool(struct.clamp_status);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReset()) {
        oprot.writeFieldBegin(RESET_FIELD_DESC);
        oprot.writeBool(struct.reset);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFeed_rate()) {
        oprot.writeFieldBegin(FEED_RATE_FIELD_DESC);
        oprot.writeDouble(struct.feed_rate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryStatusMsgTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QueryStatusMsgTupleScheme getScheme() {
      return new QueryStatusMsgTupleScheme();
    }
  }

  private static class QueryStatusMsgTupleScheme extends org.apache.thrift.scheme.TupleScheme<QueryStatusMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryStatusMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCurrent_row_number()) {
        optionals.set(0);
      }
      if (struct.isSetAll_row_number()) {
        optionals.set(1);
      }
      if (struct.isSetProgress()) {
        optionals.set(2);
      }
      if (struct.isSetNow_point1()) {
        optionals.set(3);
      }
      if (struct.isSetNow_point2()) {
        optionals.set(4);
      }
      if (struct.isSetNow_point3()) {
        optionals.set(5);
      }
      if (struct.isSetNow_point4()) {
        optionals.set(6);
      }
      if (struct.isSetNow_point5()) {
        optionals.set(7);
      }
      if (struct.isSetNow_point6()) {
        optionals.set(8);
      }
      if (struct.isSetNow_point7()) {
        optionals.set(9);
      }
      if (struct.isSetNow_point8()) {
        optionals.set(10);
      }
      if (struct.isSetStatus_msg()) {
        optionals.set(11);
      }
      if (struct.isSetRun_status()) {
        optionals.set(12);
      }
      if (struct.isSetEstop_status()) {
        optionals.set(13);
      }
      if (struct.isSetAuto_status()) {
        optionals.set(14);
      }
      if (struct.isSetClamp_status()) {
        optionals.set(15);
      }
      if (struct.isSetReset()) {
        optionals.set(16);
      }
      if (struct.isSetFeed_rate()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetCurrent_row_number()) {
        oprot.writeI32(struct.current_row_number);
      }
      if (struct.isSetAll_row_number()) {
        oprot.writeI32(struct.all_row_number);
      }
      if (struct.isSetProgress()) {
        oprot.writeDouble(struct.progress);
      }
      if (struct.isSetNow_point1()) {
        oprot.writeDouble(struct.now_point1);
      }
      if (struct.isSetNow_point2()) {
        oprot.writeDouble(struct.now_point2);
      }
      if (struct.isSetNow_point3()) {
        oprot.writeDouble(struct.now_point3);
      }
      if (struct.isSetNow_point4()) {
        oprot.writeDouble(struct.now_point4);
      }
      if (struct.isSetNow_point5()) {
        oprot.writeDouble(struct.now_point5);
      }
      if (struct.isSetNow_point6()) {
        oprot.writeDouble(struct.now_point6);
      }
      if (struct.isSetNow_point7()) {
        oprot.writeDouble(struct.now_point7);
      }
      if (struct.isSetNow_point8()) {
        oprot.writeDouble(struct.now_point8);
      }
      if (struct.isSetStatus_msg()) {
        oprot.writeString(struct.status_msg);
      }
      if (struct.isSetRun_status()) {
        oprot.writeI32(struct.run_status);
      }
      if (struct.isSetEstop_status()) {
        oprot.writeI32(struct.estop_status);
      }
      if (struct.isSetAuto_status()) {
        oprot.writeBool(struct.auto_status);
      }
      if (struct.isSetClamp_status()) {
        oprot.writeBool(struct.clamp_status);
      }
      if (struct.isSetReset()) {
        oprot.writeBool(struct.reset);
      }
      if (struct.isSetFeed_rate()) {
        oprot.writeDouble(struct.feed_rate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryStatusMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.current_row_number = iprot.readI32();
        struct.setCurrent_row_numberIsSet(true);
      }
      if (incoming.get(1)) {
        struct.all_row_number = iprot.readI32();
        struct.setAll_row_numberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.progress = iprot.readDouble();
        struct.setProgressIsSet(true);
      }
      if (incoming.get(3)) {
        struct.now_point1 = iprot.readDouble();
        struct.setNow_point1IsSet(true);
      }
      if (incoming.get(4)) {
        struct.now_point2 = iprot.readDouble();
        struct.setNow_point2IsSet(true);
      }
      if (incoming.get(5)) {
        struct.now_point3 = iprot.readDouble();
        struct.setNow_point3IsSet(true);
      }
      if (incoming.get(6)) {
        struct.now_point4 = iprot.readDouble();
        struct.setNow_point4IsSet(true);
      }
      if (incoming.get(7)) {
        struct.now_point5 = iprot.readDouble();
        struct.setNow_point5IsSet(true);
      }
      if (incoming.get(8)) {
        struct.now_point6 = iprot.readDouble();
        struct.setNow_point6IsSet(true);
      }
      if (incoming.get(9)) {
        struct.now_point7 = iprot.readDouble();
        struct.setNow_point7IsSet(true);
      }
      if (incoming.get(10)) {
        struct.now_point8 = iprot.readDouble();
        struct.setNow_point8IsSet(true);
      }
      if (incoming.get(11)) {
        struct.status_msg = iprot.readString();
        struct.setStatus_msgIsSet(true);
      }
      if (incoming.get(12)) {
        struct.run_status = iprot.readI32();
        struct.setRun_statusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.estop_status = iprot.readI32();
        struct.setEstop_statusIsSet(true);
      }
      if (incoming.get(14)) {
        struct.auto_status = iprot.readBool();
        struct.setAuto_statusIsSet(true);
      }
      if (incoming.get(15)) {
        struct.clamp_status = iprot.readBool();
        struct.setClamp_statusIsSet(true);
      }
      if (incoming.get(16)) {
        struct.reset = iprot.readBool();
        struct.setResetIsSet(true);
      }
      if (incoming.get(17)) {
        struct.feed_rate = iprot.readDouble();
        struct.setFeed_rateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

